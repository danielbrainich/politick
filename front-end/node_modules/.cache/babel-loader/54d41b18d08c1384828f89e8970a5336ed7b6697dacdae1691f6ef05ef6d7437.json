{"ast":null,"code":"import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY, PRO_PUBLICA_API_KEY } from './apiKeys';\nconst getCivicInfoRepByAddress = async zipCode => {\n  const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n  const params = {\n    address: zipCode,\n    includeOffices: true,\n    levels: 'country',\n    roles: 'legislatorLowerBody',\n    key: CIVIC_INFO_API_KEY\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    function extractDistrictNumber(inputString) {\n      const parts = inputString.split(\"cd:\");\n      return parts.length === 2 ? parseInt(parts[1], 10) : null;\n    }\n    const civicInfoRep = {\n      representative: {\n        name: data.officials[0].name,\n        party: data.officials[0].party,\n        urls: data.officials[0].urls,\n        channels: data.officials[0].channels\n      },\n      office: {\n        name: data.offices[0].name,\n        district: `${data.normalizedInput.state}-${extractDistrictNumber(data.offices[0].divisionId)}`\n      },\n      state: data.normalizedInput.state\n    };\n    return civicInfoRep;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representative: {},\n      office: {},\n      state: ''\n    };\n  }\n};\nconst getOpenSecretsRepId = async (repState, repName) => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'getLegislators',\n    id: repState,\n    apikey: OPEN_SECRETS_API_KEY,\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    function cleanName(repName) {\n      const names = repName.split(' ');\n      if (names.length > 2) {\n        names.splice(1, 1);\n      }\n      return names.join(' ');\n    }\n    function getOpenSecretsRepIdFromName(stateRepList, repName) {\n      const cleanedName = cleanName(repName);\n      for (let rep of stateRepList) {\n        if (rep['@attributes'].firstlast === cleanedName) {\n          return rep['@attributes'].cid;\n        }\n      }\n      return null;\n    }\n    const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n    return {\n      'repId': repId\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      'repId': ''\n    };\n    ;\n  }\n};\nconst getOpenSecretsCandidateContributions = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'candContrib',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    const contribData = {\n      contributors: data.response.contributors.contributor\n    };\n    console.log(contribData);\n    return contribData;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      contributors: []\n    };\n  }\n};\nconst getOpenSecretsCandidatePersonalFinances = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'memPFDprofile',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representativeContribInfo: ''\n    };\n  }\n};\nconst getRepresentativeProPublicaInfo = async repName => {\n  const params = {\n    congress: 117,\n    chamber: 'house',\n    in_office: true\n  };\n  const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`;\n  const headers = new Headers({\n    'X-API-Key': PRO_PUBLICA_API_KEY\n  });\n  try {\n    const response = await fetch(apiUrl, {\n      headers: headers\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n    const [firstName, lastName] = repName.split(' ');\n    let matchingMember;\n    for (let member of data.results[0].members) {\n      console.log(member);\n      if (member.first_name.toLowerCase() === firstName.toLowerCase() && member.last_name.toLowerCase() === lastName.toLowerCase()) {\n        matchingMember = member;\n        break;\n      }\n    }\n    if (matchingMember) {\n      console.log(matchingMember);\n      console.log(matchingMember.geoid);\n      return {\n        district: matchingMember.district,\n        geoid: matchingMember.geoid,\n        crp_id: matchingMember.crp_id\n      };\n    } else {\n      console.log(`No match found for ${firstName} ${lastName}`);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      district: '',\n      geoid: '',\n      crp_id: ''\n    };\n  }\n};\nexport { getCivicInfoRepByAddress, getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances, getRepresentativeProPublicaInfo };","map":{"version":3,"names":["CIVIC_INFO_API_KEY","OPEN_SECRETS_API_KEY","PRO_PUBLICA_API_KEY","getCivicInfoRepByAddress","zipCode","apiUrl","params","address","includeOffices","levels","roles","key","queryString","URLSearchParams","toString","urlWithParams","response","fetch","ok","Error","status","data","json","extractDistrictNumber","inputString","parts","split","length","parseInt","civicInfoRep","representative","name","officials","party","urls","channels","office","offices","district","normalizedInput","state","divisionId","error","console","getOpenSecretsRepId","repState","repName","method","id","apikey","output","cleanName","names","splice","join","getOpenSecretsRepIdFromName","stateRepList","cleanedName","rep","firstlast","cid","repId","legislator","getOpenSecretsCandidateContributions","officialId","cycle","contribData","contributors","contributor","log","getOpenSecretsCandidatePersonalFinances","representativeContribInfo","getRepresentativeProPublicaInfo","congress","chamber","in_office","headers","Headers","firstName","lastName","matchingMember","member","results","members","first_name","toLowerCase","last_name","geoid","crp_id"],"sources":["/Users/dbrainy/dev/politick/src/api.js"],"sourcesContent":["import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY, PRO_PUBLICA_API_KEY,  } from './apiKeys';\n\nconst getCivicInfoRepByAddress = async (zipCode) => {\n\n    const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n    const params = {\n        address: zipCode,\n        includeOffices: true,\n        levels: 'country',\n        roles: 'legislatorLowerBody',\n        key: CIVIC_INFO_API_KEY,\n    };\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        function extractDistrictNumber(inputString) {\n            const parts = inputString.split(\"cd:\");\n            return parts.length === 2 ? parseInt(parts[1], 10) : null;\n        }\n\n        const civicInfoRep = {\n            representative: {\n                name: data.officials[0].name,\n                party: data.officials[0].party,\n                urls: data.officials[0].urls,\n                channels: data.officials[0].channels,\n            },\n            office: {\n                name: data.offices[0].name,\n                district: `${data.normalizedInput.state}-${extractDistrictNumber(data.offices[0].divisionId)}`,\n            },\n            state: data.normalizedInput.state,\n        };\n        return civicInfoRep;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representative: {},\n            office: {},\n            state: '',\n        }\n    }\n};\n\nconst getOpenSecretsRepId = async (repState, repName) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'getLegislators',\n        id: repState,\n        apikey: OPEN_SECRETS_API_KEY,\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        function cleanName(repName) {\n            const names = repName.split(' ');\n            if (names.length > 2) {\n              names.splice(1, 1);\n            }\n            return names.join(' ');\n          }\n\n        function getOpenSecretsRepIdFromName(stateRepList, repName) {\n            const cleanedName = cleanName(repName);\n            for (let rep of stateRepList) {\n                if (rep['@attributes'].firstlast === cleanedName) {\n                    return rep['@attributes'].cid\n                }\n            }\n            return null;\n        }\n\n        const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n\n        return {'repId': repId};\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {'repId': ''};;\n    }\n};\n\nconst getOpenSecretsCandidateContributions = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'candContrib',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        const contribData = {\n            contributors: data.response.contributors.contributor\n        }\n        console.log(contribData)\n        return contribData;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return { contributors: [] };\n    }\n};\n\n\nconst getOpenSecretsCandidatePersonalFinances = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'memPFDprofile',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n        return data;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representativeContribInfo: '',\n        }\n    }\n}\n\nconst getRepresentativeProPublicaInfo = async (repName) => {\n\n    const params = {\n        congress: 117,\n        chamber: 'house',\n        in_office: true,\n    }\n    const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`\n\n    const headers = new Headers({\n        'X-API-Key': PRO_PUBLICA_API_KEY,\n    });\n\n    try {\n        const response = await fetch(apiUrl, { headers: headers });\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n\n        const [firstName, lastName] = repName.split(' ');\n\n        let matchingMember;\n\n        for (let member of data.results[0].members) {\n            console.log(member);\n            if (\n                member.first_name.toLowerCase() === firstName.toLowerCase() &&\n                member.last_name.toLowerCase() === lastName.toLowerCase()\n            ) {\n                matchingMember = member;\n                break;\n            }\n        }\n\n        if (matchingMember) {\n            console.log(matchingMember);\n            console.log(matchingMember.geoid)\n\n            return {\n                district: matchingMember.district,\n                geoid: matchingMember.geoid,\n                crp_id: matchingMember.crp_id,\n            }\n\n        } else {\n            console.log(`No match found for ${firstName} ${lastName}`);\n            return null;\n        }\n    }\n catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            district: '',\n            geoid: '',\n            crp_id: '',\n        }\n    }\n}\n\n\n\n\n\nexport { getCivicInfoRepByAddress, getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances, getRepresentativeProPublicaInfo};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}