{"ast":null,"code":"import { PRO_PUBLICA_API_KEY } from '../apiKeys';\nconst getRepresentativeProPublicaInfo = async repName => {\n  const params = {\n    congress: 118,\n    chamber: 'house'\n  };\n  const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`;\n  const headers = new Headers({\n    'X-API-Key': PRO_PUBLICA_API_KEY\n  });\n  try {\n    const response = await fetch(apiUrl, {\n      headers: headers\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n    const [firstName, lastName] = repName.split(' ');\n    let matchingMember;\n    for (let member of data.results[0].members) {\n      let normalizedFirstName = getFullNameFromNickname(firstName).toLowerCase();\n      if (member.first_name.toLowerCase() === normalizedFirstName && member.last_name.toLowerCase() === lastName.toLowerCase()) {\n        matchingMember = member;\n        break;\n      }\n    }\n    if (matchingMember) {\n      const proPublicaRepInfo = {\n        district: matchingMember.district,\n        id: matchingMember.id,\n        crp_id: matchingMember.crp_id\n      };\n      return proPublicaRepInfo;\n    } else {\n      console.log(`No match found for ${firstName} ${lastName}`);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      district: '',\n      geoid: '',\n      crp_id: ''\n    };\n  }\n};\nexport { getRepresentativeProPublicaInfo };","map":{"version":3,"names":["PRO_PUBLICA_API_KEY","getRepresentativeProPublicaInfo","repName","params","congress","chamber","apiUrl","headers","Headers","response","fetch","ok","Error","status","data","json","console","log","firstName","lastName","split","matchingMember","member","results","members","normalizedFirstName","getFullNameFromNickname","toLowerCase","first_name","last_name","proPublicaRepInfo","district","id","crp_id","error","geoid"],"sources":["/Users/dbrainy/dev/politick/src/api/proPublicaApi.js"],"sourcesContent":["import { PRO_PUBLICA_API_KEY } from '../apiKeys';\n\n\nconst getRepresentativeProPublicaInfo = async (repName) => {\n\n    const params = {\n        congress: 118,\n        chamber: 'house',\n    }\n    const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`\n\n    const headers = new Headers({\n        'X-API-Key': PRO_PUBLICA_API_KEY,\n    });\n\n    try {\n        const response = await fetch(apiUrl, { headers: headers });\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n\n        const [firstName, lastName] = repName.split(' ');\n\n        let matchingMember;\n\n        for (let member of data.results[0].members) {\n            let normalizedFirstName = getFullNameFromNickname(firstName).toLowerCase();\n\n            if (\n                member.first_name.toLowerCase() === normalizedFirstName &&\n                member.last_name.toLowerCase() === lastName.toLowerCase()\n            ) {\n                matchingMember = member;\n                break;\n            }\n        }\n\n        if (matchingMember) {\n            const proPublicaRepInfo = {\n                district: matchingMember.district,\n                id: matchingMember.id,\n                crp_id: matchingMember.crp_id,\n            }\n            return proPublicaRepInfo;\n\n        } else {\n            console.log(`No match found for ${firstName} ${lastName}`);\n            return null;\n        }\n    }\n\n    catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            district: '',\n            geoid: '',\n            crp_id: '',\n        }\n    }\n}\n\nexport { getRepresentativeProPublicaInfo };\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,YAAY;AAGhD,MAAMC,+BAA+B,GAAG,MAAOC,OAAO,IAAK;EAEvD,MAAMC,MAAM,GAAG;IACXC,QAAQ,EAAE,GAAG;IACbC,OAAO,EAAE;EACb,CAAC;EACD,MAAMC,MAAM,GAAI,0CAAyCH,MAAM,CAACC,QAAS,IAAGD,MAAM,CAACE,OAAQ,eAAc;EAEzG,MAAME,OAAO,GAAG,IAAIC,OAAO,CAAC;IACxB,WAAW,EAAER;EACjB,CAAC,CAAC;EAEF,IAAI;IACA,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,EAAE;MAAEC,OAAO,EAAEA;IAAQ,CAAC,CAAC;IAC1D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;IAC7D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IAEjB,MAAM,CAACI,SAAS,EAAEC,QAAQ,CAAC,GAAGjB,OAAO,CAACkB,KAAK,CAAC,GAAG,CAAC;IAEhD,IAAIC,cAAc;IAElB,KAAK,IAAIC,MAAM,IAAIR,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,EAAE;MACxC,IAAIC,mBAAmB,GAAGC,uBAAuB,CAACR,SAAS,CAAC,CAACS,WAAW,CAAC,CAAC;MAE1E,IACIL,MAAM,CAACM,UAAU,CAACD,WAAW,CAAC,CAAC,KAAKF,mBAAmB,IACvDH,MAAM,CAACO,SAAS,CAACF,WAAW,CAAC,CAAC,KAAKR,QAAQ,CAACQ,WAAW,CAAC,CAAC,EAC3D;QACEN,cAAc,GAAGC,MAAM;QACvB;MACJ;IACJ;IAEA,IAAID,cAAc,EAAE;MAChB,MAAMS,iBAAiB,GAAG;QACtBC,QAAQ,EAAEV,cAAc,CAACU,QAAQ;QACjCC,EAAE,EAAEX,cAAc,CAACW,EAAE;QACrBC,MAAM,EAAEZ,cAAc,CAACY;MAC3B,CAAC;MACD,OAAOH,iBAAiB;IAE5B,CAAC,MAAM;MACHd,OAAO,CAACC,GAAG,CAAE,sBAAqBC,SAAU,IAAGC,QAAS,EAAC,CAAC;MAC1D,OAAO,IAAI;IACf;EACJ,CAAC,CAED,OAAOe,KAAK,EAAE;IACVlB,OAAO,CAACkB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACHH,QAAQ,EAAE,EAAE;MACZI,KAAK,EAAE,EAAE;MACTF,MAAM,EAAE;IACZ,CAAC;EACL;AACJ,CAAC;AAED,SAAShC,+BAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}