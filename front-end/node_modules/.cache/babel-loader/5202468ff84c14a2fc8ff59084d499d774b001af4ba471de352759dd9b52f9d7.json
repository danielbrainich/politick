{"ast":null,"code":"import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY } from './apiKeys';\nconst getCivicInfoOfficialsByAddress = async zipCode => {\n  const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n  const params = {\n    address: zipCode,\n    includeOffices: true,\n    levels: 'country',\n    roles: ['legislatorLowerBody', 'legislatorUpperBody'],\n    key: CIVIC_INFO_API_KEY\n  };\n  const urlWithParams = `${apiUrl}?address=${params.address}&includeOffices=${params.includeOffices}&levels=${params.levels}&roles=${params.roles[0]}&roles=${params.roles[1]}&key=${params.key}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    function getOfficialIndicesByRole(offices, roleName) {\n      let OfficialIndices = null;\n      for (let office of offices) {\n        if (office.name === roleName) {\n          OfficialIndices = office.officialIndices;\n          break;\n        }\n      }\n      return OfficialIndices;\n    }\n    const indexSenator1 = getOfficialIndicesByRole(data.offices, 'U.S. Senator')[0];\n    const indexSenator2 = getOfficialIndicesByRole(data.offices, 'U.S. Senator')[1];\n    const indexRepresentative = getOfficialIndicesByRole(data.offices, 'U.S. Representative')[0];\n    return {\n      representative: data.officials[indexRepresentative],\n      senator1: data.officials[indexSenator1],\n      senator2: data.officials[indexSenator2]\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representative: {},\n      senator1: {},\n      senator2: {}\n    };\n  }\n};\nconst getOpenSecretsCandidateIds = async () => {\n  const apiUrl = 'https://www.opensecrets.org/api';\n  const params = {\n    method: 'getLegislators',\n    id: 'CA',\n    apiKey: OPEN_SECRETS_API_KEY,\n    output: 'json'\n  };\n\n  // const urlWithParams = `${apiUrl}method=${params.method}&id=${params.id}&apiKey=${params.apiKey}&output=${params.output}`;\n  const urlWithParams = 'http://www.opensecrets.org/api/?method=getLegislators&id=NJ&apikey=__apikey__';\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representativeId: {},\n      senator1Id: {},\n      senatorId: {}\n    };\n  }\n};\nexport { getCivicInfoOfficialsByAddress, getOpenSecretsCandidateIds };","map":{"version":3,"names":["CIVIC_INFO_API_KEY","OPEN_SECRETS_API_KEY","getCivicInfoOfficialsByAddress","zipCode","apiUrl","params","address","includeOffices","levels","roles","key","urlWithParams","response","fetch","ok","Error","status","data","json","getOfficialIndicesByRole","offices","roleName","OfficialIndices","office","name","officialIndices","indexSenator1","indexSenator2","indexRepresentative","representative","officials","senator1","senator2","error","console","getOpenSecretsCandidateIds","method","id","apiKey","output","log","representativeId","senator1Id","senatorId"],"sources":["/Users/dbrainy/dev/politick/src/api.js"],"sourcesContent":["import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY } from './apiKeys';\n\nconst getCivicInfoOfficialsByAddress = async (zipCode) => {\n\n    const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n    const params = {\n        address: zipCode,\n        includeOffices: true,\n        levels: 'country',\n        roles: ['legislatorLowerBody', 'legislatorUpperBody'],\n        key: CIVIC_INFO_API_KEY,\n    };\n\n    const urlWithParams = `${apiUrl}?address=${params.address}&includeOffices=${params.includeOffices}&levels=${params.levels}&roles=${params.roles[0]}&roles=${params.roles[1]}&key=${params.key}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        function getOfficialIndicesByRole(offices, roleName) {\n            let OfficialIndices = null;\n            for (let office of offices) {\n                if (office.name === roleName) {\n                    OfficialIndices = office.officialIndices;\n                    break;\n                }\n            }\n            return OfficialIndices;\n        }\n\n        const indexSenator1 = getOfficialIndicesByRole(data.offices, 'U.S. Senator')[0];\n        const indexSenator2 = getOfficialIndicesByRole(data.offices, 'U.S. Senator')[1];\n        const indexRepresentative = getOfficialIndicesByRole(data.offices, 'U.S. Representative')[0];\n\n        return {\n            representative: data.officials[indexRepresentative],\n            senator1: data.officials[indexSenator1],\n            senator2: data.officials[indexSenator2],\n        };\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representative: {},\n            senator1: {},\n            senator2: {},\n        }\n    }\n};\n\nconst getOpenSecretsCandidateIds = async () => {\n\n    const apiUrl = 'https://www.opensecrets.org/api'\n    const params = {\n        method: 'getLegislators',\n        id: 'CA',\n        apiKey: OPEN_SECRETS_API_KEY,\n        output: 'json',\n    }\n\n    // const urlWithParams = `${apiUrl}method=${params.method}&id=${params.id}&apiKey=${params.apiKey}&output=${params.output}`;\n    const urlWithParams = 'http://www.opensecrets.org/api/?method=getLegislators&id=NJ&apikey=__apikey__'\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        console.log(data);\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representativeId: {},\n            senator1Id: {},\n            senatorId: {},\n        }\n    }\n\n};\n\nexport { getCivicInfoOfficialsByAddress, getOpenSecretsCandidateIds };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}