{"ast":null,"code":"var _jsxFileName = \"/Users/dbrainy/dev/politick/src/GetReps.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport CIVIC_INFO_API_KEY from './apiKeys';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GetFederalOfficials() {\n  _s();\n  const [representative, setRepresentative] = useState({});\n  const [senator1, setSenator1] = useState({});\n  const [senator2, setSenator2] = useState({});\n  const [formData, setSsetenator2] = useState({});\n  const getData = async () => {\n    const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n    const params = {\n      address: '94501',\n      includeOffices: true,\n      levels: 'country',\n      roles: ['legislatorLowerBody', 'legislatorUpperBody'],\n      key: CIVIC_INFO_API_KEY\n    };\n    const urlWithParams = `${apiUrl}?address=${params.address}&includeOffices=${params.includeOffices}&levels=${params.levels}&roles=${params.roles[0]}&roles=${params.roles[1]}&key=${params.key}`;\n    try {\n      const response = await fetch(urlWithParams);\n      if (!response.ok) {\n        throw new Error(`HTTP error. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      function getRepresentativeIndex(offices) {\n        let representativeIndex = null;\n        for (let office of offices) {\n          if (office.name === 'U.S. Representative') {\n            representativeIndex = office.officialIndices;\n            break;\n          }\n        }\n        return representativeIndex;\n      }\n      function getSenatorIndices(offices) {\n        let senatorIndices = null;\n        for (let office of offices) {\n          if (office.name === 'U.S. Senator') {\n            senatorIndices = office.officialIndices;\n            break;\n          }\n        }\n        return senatorIndices;\n      }\n      const indexSenator1 = getSenatorIndices(data.offices)[0];\n      const indexSenator2 = getSenatorIndices(data.offices)[1];\n      const indexRepresentative = getRepresentativeIndex(data.offices)[0];\n      setRepresentative(data.officials[indexRepresentative]);\n      setSenator1(data.officials[indexSenator1]);\n      setSenator2(data.officials[indexSenator2]);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\"Representative: \", representative.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\"Senators: \", senator1.name, \" and \", senator2.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n_s(GetFederalOfficials, \"jIl35tO3harctjS3Uybhb+FsiCo=\");\n_c = GetFederalOfficials;\n;\nexport default GetFederalOfficials;\nvar _c;\n$RefreshReg$(_c, \"GetFederalOfficials\");","map":{"version":3,"names":["useEffect","useState","CIVIC_INFO_API_KEY","jsxDEV","_jsxDEV","GetFederalOfficials","_s","representative","setRepresentative","senator1","setSenator1","senator2","setSenator2","formData","setSsetenator2","getData","apiUrl","params","address","includeOffices","levels","roles","key","urlWithParams","response","fetch","ok","Error","status","data","json","getRepresentativeIndex","offices","representativeIndex","office","name","officialIndices","getSenatorIndices","senatorIndices","indexSenator1","indexSenator2","indexRepresentative","officials","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dbrainy/dev/politick/src/GetReps.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport CIVIC_INFO_API_KEY from './apiKeys';\n\nfunction GetFederalOfficials() {\n\n    const [representative, setRepresentative] = useState({});\n    const [senator1, setSenator1] = useState({});\n    const [senator2, setSenator2] = useState({});\n    const [formData, setSsetenator2] = useState({});\n\n    const getData = async () => {\n\n        const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n        const params = {\n            address: '94501',\n            includeOffices: true,\n            levels: 'country',\n            roles: ['legislatorLowerBody', 'legislatorUpperBody'],\n            key: CIVIC_INFO_API_KEY,\n        };\n\n        const urlWithParams = `${apiUrl}?address=${params.address}&includeOffices=${params.includeOffices}&levels=${params.levels}&roles=${params.roles[0]}&roles=${params.roles[1]}&key=${params.key}`;\n\n        try {\n            const response = await fetch(urlWithParams);\n            if (!response.ok) {\n                throw new Error(`HTTP error. Status: ${response.status}`);\n            }\n            const data = await response.json();\n\n            function getRepresentativeIndex(offices) {\n                let representativeIndex = null;\n                for (let office of offices) {\n                    if (office.name === 'U.S. Representative') {\n                        representativeIndex = office.officialIndices;\n                        break;\n                    }\n                }\n                return representativeIndex;\n            }\n\n            function getSenatorIndices(offices) {\n                let senatorIndices = null;\n                for (let office of offices) {\n                    if (office.name === 'U.S. Senator') {\n                        senatorIndices = office.officialIndices;\n                        break;\n                    }\n                }\n                return senatorIndices;\n            }\n\n            const indexSenator1 = getSenatorIndices(data.offices)[0];\n            const indexSenator2 = getSenatorIndices(data.offices)[1];\n            const indexRepresentative = getRepresentativeIndex(data.offices)[0];\n\n            setRepresentative(data.officials[indexRepresentative]);\n            setSenator1(data.officials[indexSenator1]);\n            setSenator2(data.officials[indexSenator2]);\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    };\n\n    useEffect(() => {\n        getData()\n    }, []);\n\n    return (\n        <ul>\n            <li>Representative: {representative.name}</li>\n            <li>Senators: {senator1.name} and {senator2.name}</li>\n        </ul>\n    );\n};\n\nexport default GetFederalOfficials;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}