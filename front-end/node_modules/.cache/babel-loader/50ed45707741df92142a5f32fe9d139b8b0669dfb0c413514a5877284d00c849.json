{"ast":null,"code":"import { PRO_PUBLICA_API_KEY } from '../apiKeys';\nconst getRepresentativeProPublicaInfo = async repName => {\n  const params = {\n    congress: 118,\n    chamber: 'house'\n  };\n  const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`;\n  const headers = new Headers({\n    'X-API-Key': PRO_PUBLICA_API_KEY\n  });\n  try {\n    const response = await fetch(apiUrl, {\n      headers: headers\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n    const [firstName, lastName] = repName.split(' ');\n    let filteredMembers = [];\n    for (let i = 0; i < data.results[0].members.length; i++) {\n      if (data.results[0].members[i].last_name.toLowerCase() === lastName.toLowerCase()) {\n        filteredMembers.push(data.results[0].members[i]);\n      }\n    }\n    let matchingMember = null;\n    if (filteredMembers.length === 1) {\n      matchingMember = filteredMembers[0];\n    } else if (filteredMembers.length > 1) {\n      // More than one member with the same last name, further filter by first name\n      for (let i = 0; i < filteredMembers.length; i++) {\n        if (filteredMembers[i].first_name.toLowerCase() === firstName.toLowerCase()) {\n          matchingMember = filteredMembers[i];\n          break; // Exit the loop once a match is found\n        }\n      }\n    }\n    if (matchingMember) {\n      const proPublicaRepInfo = {\n        district: matchingMember.district,\n        id: matchingMember.id,\n        crp_id: matchingMember.crp_id\n      };\n      return proPublicaRepInfo;\n    } else {\n      console.log(`No match found for ${firstName} ${lastName}`);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      district: '',\n      geoid: '',\n      crp_id: ''\n    };\n  }\n};\nexport { getRepresentativeProPublicaInfo };","map":{"version":3,"names":["PRO_PUBLICA_API_KEY","getRepresentativeProPublicaInfo","repName","params","congress","chamber","apiUrl","headers","Headers","response","fetch","ok","Error","status","data","json","console","log","firstName","lastName","split","filteredMembers","i","results","members","length","last_name","toLowerCase","push","matchingMember","first_name","proPublicaRepInfo","district","id","crp_id","error","geoid"],"sources":["/Users/dbrainy/dev/politick/src/api/proPublicaApi.js"],"sourcesContent":["import { PRO_PUBLICA_API_KEY } from '../apiKeys';\n\n\nconst getRepresentativeProPublicaInfo = async (repName) => {\n\n    const params = {\n        congress: 118,\n        chamber: 'house',\n    }\n    const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`\n\n    const headers = new Headers({\n        'X-API-Key': PRO_PUBLICA_API_KEY,\n    });\n\n    try {\n        const response = await fetch(apiUrl, { headers: headers });\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n\n        const [firstName, lastName] = repName.split(' ');\n\n        let filteredMembers = [];\n        for (let i = 0; i < data.results[0].members.length; i++) {\n            if (data.results[0].members[i].last_name.toLowerCase() === lastName.toLowerCase()) {\n                filteredMembers.push(data.results[0].members[i]);\n            }\n        }\n\n        let matchingMember = null;\n\n        if (filteredMembers.length === 1) {\n            matchingMember = filteredMembers[0];\n        } else if (filteredMembers.length > 1) {\n            // More than one member with the same last name, further filter by first name\n            for (let i = 0; i < filteredMembers.length; i++) {\n                if (filteredMembers[i].first_name.toLowerCase() === firstName.toLowerCase()) {\n                    matchingMember = filteredMembers[i];\n                    break; // Exit the loop once a match is found\n                }\n            }\n        }\n\n        if (matchingMember) {\n            const proPublicaRepInfo = {\n                district: matchingMember.district,\n                id: matchingMember.id,\n                crp_id: matchingMember.crp_id,\n            }\n            return proPublicaRepInfo;\n\n        } else {\n            console.log(`No match found for ${firstName} ${lastName}`);\n            return null;\n        }\n    }\n\n    catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            district: '',\n            geoid: '',\n            crp_id: '',\n        }\n    }\n}\n\nexport { getRepresentativeProPublicaInfo };\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,YAAY;AAGhD,MAAMC,+BAA+B,GAAG,MAAOC,OAAO,IAAK;EAEvD,MAAMC,MAAM,GAAG;IACXC,QAAQ,EAAE,GAAG;IACbC,OAAO,EAAE;EACb,CAAC;EACD,MAAMC,MAAM,GAAI,0CAAyCH,MAAM,CAACC,QAAS,IAAGD,MAAM,CAACE,OAAQ,eAAc;EAEzG,MAAME,OAAO,GAAG,IAAIC,OAAO,CAAC;IACxB,WAAW,EAAER;EACjB,CAAC,CAAC;EAEF,IAAI;IACA,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,EAAE;MAAEC,OAAO,EAAEA;IAAQ,CAAC,CAAC;IAC1D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;IAC7D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IAEjB,MAAM,CAACI,SAAS,EAAEC,QAAQ,CAAC,GAAGjB,OAAO,CAACkB,KAAK,CAAC,GAAG,CAAC;IAEhD,IAAIC,eAAe,GAAG,EAAE;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,MAAM,EAAEH,CAAC,EAAE,EAAE;MACrD,IAAIR,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACF,CAAC,CAAC,CAACI,SAAS,CAACC,WAAW,CAAC,CAAC,KAAKR,QAAQ,CAACQ,WAAW,CAAC,CAAC,EAAE;QAC/EN,eAAe,CAACO,IAAI,CAACd,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACF,CAAC,CAAC,CAAC;MACpD;IACJ;IAEA,IAAIO,cAAc,GAAG,IAAI;IAEzB,IAAIR,eAAe,CAACI,MAAM,KAAK,CAAC,EAAE;MAC9BI,cAAc,GAAGR,eAAe,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM,IAAIA,eAAe,CAACI,MAAM,GAAG,CAAC,EAAE;MACnC;MACA,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,eAAe,CAACI,MAAM,EAAEH,CAAC,EAAE,EAAE;QAC7C,IAAID,eAAe,CAACC,CAAC,CAAC,CAACQ,UAAU,CAACH,WAAW,CAAC,CAAC,KAAKT,SAAS,CAACS,WAAW,CAAC,CAAC,EAAE;UACzEE,cAAc,GAAGR,eAAe,CAACC,CAAC,CAAC;UACnC,MAAM,CAAC;QACX;MACJ;IACJ;IAEA,IAAIO,cAAc,EAAE;MAChB,MAAME,iBAAiB,GAAG;QACtBC,QAAQ,EAAEH,cAAc,CAACG,QAAQ;QACjCC,EAAE,EAAEJ,cAAc,CAACI,EAAE;QACrBC,MAAM,EAAEL,cAAc,CAACK;MAC3B,CAAC;MACD,OAAOH,iBAAiB;IAE5B,CAAC,MAAM;MACHf,OAAO,CAACC,GAAG,CAAE,sBAAqBC,SAAU,IAAGC,QAAS,EAAC,CAAC;MAC1D,OAAO,IAAI;IACf;EACJ,CAAC,CAED,OAAOgB,KAAK,EAAE;IACVnB,OAAO,CAACmB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACHH,QAAQ,EAAE,EAAE;MACZI,KAAK,EAAE,EAAE;MACTF,MAAM,EAAE;IACZ,CAAC;EACL;AACJ,CAAC;AAED,SAASjC,+BAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}