{"ast":null,"code":"import { OPEN_SECRETS_API_KEY } from '../apiKeys';\nconst fetchOpenSecretsIds = async url => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`HTTP error. Status: ${response.status}`);\n  }\n  return response.json();\n};\nconst cleanName = repName => {\n  const names = repName.split(' ');\n  if (names.length > 2) {\n    names.splice(1, 1);\n  }\n  return names.join(' ');\n};\nconst getOpenSecretsId = async (repState, repName) => {\n  const apiUrl = `http://localhost:8000/api/open_secrets/ids/${repState}`;\n  try {\n    const data = await fetchOpenSecretsIds(apiUrl);\n    const cleanedName = cleanName(repName);\n    for (let rep of data.response.legislator) {\n      if (rep['@attributes'].firstlast === cleanedName) {\n        return {\n          'repId': rep['@attributes'].cid\n        };\n      }\n    }\n    return {\n      'repId': null\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      'repId': '',\n      'error': true,\n      'errorMessage': error.message\n    };\n  }\n};\nexport default fetchOpenSecretsIds;\nconst getOpenSecretsCandidateContributions = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'candContrib',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('openSecretsContributions:', data);\n    const contribData = {\n      contributors: data.response.contributors.contributor,\n      cycle: data.response.contributors['@attributes'].cycle,\n      notice: data.response.contributors['@attributes'].notice,\n      origin: data.response.contributors['@attributes'].origin\n    };\n    return contribData;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      contributors: [],\n      cycle: '',\n      notice: '',\n      origin: ''\n    };\n  }\n};\n\n// const getOpenSecretsCandidatePersonalFinances = async (officialId) => {\n\n//     const apiUrl = 'http://www.opensecrets.org/api/'\n//     const params = {\n//         method: 'memPFDprofile',\n//         apikey: OPEN_SECRETS_API_KEY,\n//         cid: officialId,\n//         cycle: '2024',\n//         output: 'json',\n//     }\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n//         console.log(data);\n//         return data;\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {\n//             representativeContribInfo: '',\n//         }\n//     }\n// }\n\nexport { getOpenSecretsId, getOpenSecretsCandidateContributions };","map":{"version":3,"names":["OPEN_SECRETS_API_KEY","fetchOpenSecretsIds","url","response","fetch","ok","Error","status","json","cleanName","repName","names","split","length","splice","join","getOpenSecretsId","repState","apiUrl","data","cleanedName","rep","legislator","firstlast","cid","error","console","message","getOpenSecretsCandidateContributions","officialId","params","method","apikey","cycle","output","queryString","URLSearchParams","toString","urlWithParams","log","contribData","contributors","contributor","notice","origin"],"sources":["/Users/dbrainy/dev/politick/front-end/src/api/openSecretsIds.js"],"sourcesContent":["import { OPEN_SECRETS_API_KEY } from '../apiKeys';\n\nconst fetchOpenSecretsIds = async (url) => {\n    const response = await fetch(url);\n    if (!response.ok) {\n        throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    return response.json();\n};\n\nconst cleanName = (repName) => {\n    const names = repName.split(' ');\n    if (names.length > 2) {\n      names.splice(1, 1);\n    }\n    return names.join(' ');\n};\n\nconst getOpenSecretsId = async (repState, repName) => {\n    const apiUrl = `http://localhost:8000/api/open_secrets/ids/${repState}`;\n    try {\n        const data = await fetchOpenSecretsIds(apiUrl);\n        const cleanedName = cleanName(repName);\n        for (let rep of data.response.legislator) {\n            if (rep['@attributes'].firstlast === cleanedName) {\n                return { 'repId': rep['@attributes'].cid };\n            }\n        }\n        return { 'repId': null };\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return { 'repId': '', 'error': true, 'errorMessage': error.message };\n    }\n};\n\nexport default fetchOpenSecretsIds;\n\n\nconst getOpenSecretsCandidateContributions = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'candContrib',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('openSecretsContributions:', data)\n        const contribData = {\n            contributors: data.response.contributors.contributor,\n            cycle: data.response.contributors['@attributes'].cycle,\n            notice: data.response.contributors['@attributes'].notice,\n            origin: data.response.contributors['@attributes'].origin,\n        };\n\n        return contribData;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            contributors: [],\n            cycle: '',\n            notice: '',\n            origin: '',\n\n        };\n    }\n};\n\n\n\n// const getOpenSecretsCandidatePersonalFinances = async (officialId) => {\n\n//     const apiUrl = 'http://www.opensecrets.org/api/'\n//     const params = {\n//         method: 'memPFDprofile',\n//         apikey: OPEN_SECRETS_API_KEY,\n//         cid: officialId,\n//         cycle: '2024',\n//         output: 'json',\n//     }\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n//         console.log(data);\n//         return data;\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {\n//             representativeContribInfo: '',\n//         }\n//     }\n// }\n\nexport { getOpenSecretsId, getOpenSecretsCandidateContributions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}