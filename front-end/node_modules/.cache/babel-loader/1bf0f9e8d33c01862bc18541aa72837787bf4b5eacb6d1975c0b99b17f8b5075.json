{"ast":null,"code":"import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY } from './apiKeys';\nconst getCivicInfoRepByAddress = async zipCode => {\n  const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n  const params = {\n    address: zipCode,\n    includeOffices: true,\n    levels: 'country',\n    roles: 'legislatorLowerBody',\n    key: CIVIC_INFO_API_KEY\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    const civicInfoRep = {\n      representative: data.officials[0],\n      state: data.normalizedInput.state\n    };\n    return civicInfoRep;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representative: {},\n      state: ''\n    };\n  }\n};\nconst getOpenSecretsRepId = async (repState, repName) => {\n  const apiUrl = 'http://www.opensecrets.org/api/?';\n  const params = {\n    method: 'getLegislators',\n    id: repState,\n    apiKey: OPEN_SECRETS_API_KEY,\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    function getOpenSecretsRepIdFromName(data, repName) {\n      for (let rep of data) {\n        if (rep['@attributes'].firstlast === repName) {\n          return {\n            firstlast: rep['@attributes'].firstlast,\n            cid: rep['@attributes'].cid\n          };\n        }\n      }\n      return null;\n    }\n    const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n    return repId;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representativeId: ''\n    };\n  }\n};\nconst getOpenSecretCandidatesInfo = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'candContrib',\n    apiKey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2000',\n    // out of range cycle returns most recent cycle\n    output: 'json'\n  };\n  const urlWithParams = `${apiUrl}?method=${params.method}&apikey=${params.apiKey}&cid=${params.cid}&cycle=${params.cycle}&output=${params.output}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representativeContribInfo: ''\n    };\n  }\n};\nexport { getCivicInfoRepByAddress, getOpenSecretsRepId, getOpenSecretCandidatesInfo };","map":{"version":3,"names":["CIVIC_INFO_API_KEY","OPEN_SECRETS_API_KEY","getCivicInfoRepByAddress","zipCode","apiUrl","params","address","includeOffices","levels","roles","key","queryString","URLSearchParams","toString","urlWithParams","response","fetch","ok","Error","status","data","json","civicInfoRep","representative","officials","state","normalizedInput","error","console","getOpenSecretsRepId","repState","repName","method","id","apiKey","output","getOpenSecretsRepIdFromName","rep","firstlast","cid","repId","legislator","representativeId","getOpenSecretCandidatesInfo","officialId","cycle","log","representativeContribInfo"],"sources":["/Users/dbrainy/dev/politick/src/api.js"],"sourcesContent":["import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY } from './apiKeys';\n\nconst getCivicInfoRepByAddress = async (zipCode) => {\n\n    const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n    const params = {\n        address: zipCode,\n        includeOffices: true,\n        levels: 'country',\n        roles: 'legislatorLowerBody',\n        key: CIVIC_INFO_API_KEY,\n    };\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        const civicInfoRep = {\n            representative: data.officials[0],\n            state: data.normalizedInput.state,\n        }\n        return civicInfoRep;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representative: {},\n            state: '',\n        }\n    }\n};\n\nconst getOpenSecretsRepId = async (repState, repName) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/?'\n    const params = {\n        method: 'getLegislators',\n        id: repState,\n        apiKey: OPEN_SECRETS_API_KEY,\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        function getOpenSecretsRepIdFromName(data, repName) {\n            for (let rep of data) {\n                if (rep['@attributes'].firstlast === repName) {\n                    return {\n                        firstlast: rep['@attributes'].firstlast,\n                        cid: rep['@attributes'].cid,\n                    };\n                }\n            }\n            return null;\n        }\n\n        const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n        return repId;\n\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representativeId: '',\n        }\n    }\n\n};\n\nconst getOpenSecretCandidatesInfo = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'candContrib',\n        apiKey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2000', // out of range cycle returns most recent cycle\n        output: 'json',\n    }\n\n    const urlWithParams = `${apiUrl}?method=${params.method}&apikey=${params.apiKey}&cid=${params.cid}&cycle=${params.cycle}&output=${params.output}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        console.log(data)\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representativeContribInfo: '',\n        }\n    }\n}\n\nexport { getCivicInfoRepByAddress, getOpenSecretsRepId, getOpenSecretCandidatesInfo };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}