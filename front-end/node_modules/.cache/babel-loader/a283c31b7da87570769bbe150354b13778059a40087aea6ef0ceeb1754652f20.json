{"ast":null,"code":"import { OPEN_SECRETS_API_KEY } from '../apiKeys';\nconst getOpenSecretsRepId = async (repState, repName) => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'getLegislators',\n    id: repState,\n    apikey: OPEN_SECRETS_API_KEY,\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    function cleanName(repName) {\n      const names = repName.split(' ');\n      if (names.length > 2) {\n        names.splice(1, 1);\n      }\n      return names.join(' ');\n    }\n    function getOpenSecretsRepIdFromName(stateRepList, repName) {\n      const cleanedName = cleanName(repName);\n      for (let rep of stateRepList) {\n        if (rep['@attributes'].firstlast === cleanedName) {\n          return rep['@attributes'].cid;\n        }\n      }\n      return null;\n    }\n    const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n    return {\n      'repId': repId\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      'repId': ''\n    };\n    ;\n  }\n};\nconst getOpenSecretsCandidateContributions = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'candContrib',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('openSecretsContributions:', data);\n    const contribData = {\n      contributors: data.response.contributors.contributor,\n      cycle: data.response.contributors['@attributes'].cycle,\n      notice: data.response.contributors['@attributes'].notice,\n      origin: data.response.contributors['@attributes'].origin\n    };\n    return contribData;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      contributors: [],\n      contributors: '',\n      contributors: '',\n      contributors: ''\n    };\n  }\n};\nconst getOpenSecretsCandidateSummary = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'candSummary',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('openSecretsSummary:', data);\n    function formatDollars(amount) {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 0,\n        minimumFractionDigits: 0\n      }).format(amount);\n    }\n    const contribSummary = {\n      cashOnHand: formatDollars(data.response.summary['@attributes'].cash_on_hand),\n      cycle: data.response.summary['@attributes'].cycle,\n      // This is not a dollar amount\n      debt: formatDollars(data.response.summary['@attributes'].debt),\n      lastUpdated: data.response.summary['@attributes'].last_updated,\n      // This is a date\n      nextElection: data.response.summary['@attributes'].next_election,\n      // This is a date or election cycle\n      origin: data.response.summary['@attributes'].origin,\n      // This is likely a string\n      spent: formatDollars(data.response.summary['@attributes'].spent),\n      total: formatDollars(data.response.summary['@attributes'].total)\n    };\n    return contribSummary;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      cashOnHand: '',\n      cycle: '',\n      debt: '',\n      lastUpdated: '',\n      nextElection: '',\n      origin: '',\n      spent: '',\n      total: ''\n    };\n  }\n};\nconst getOpenSecretsCandidatePersonalFinances = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'memPFDprofile',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representativeContribInfo: ''\n    };\n  }\n};\nexport { getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances, getOpenSecretsCandidateSummary };","map":{"version":3,"names":["OPEN_SECRETS_API_KEY","getOpenSecretsRepId","repState","repName","apiUrl","params","method","id","apikey","output","queryString","URLSearchParams","toString","urlWithParams","response","fetch","ok","Error","status","data","json","cleanName","names","split","length","splice","join","getOpenSecretsRepIdFromName","stateRepList","cleanedName","rep","firstlast","cid","repId","legislator","error","console","getOpenSecretsCandidateContributions","officialId","cycle","log","contribData","contributors","contributor","notice","origin","getOpenSecretsCandidateSummary","formatDollars","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","contribSummary","cashOnHand","summary","cash_on_hand","debt","lastUpdated","last_updated","nextElection","next_election","spent","total","getOpenSecretsCandidatePersonalFinances","representativeContribInfo"],"sources":["/Users/dbrainy/dev/politick/src/api/openSecretsApi.js"],"sourcesContent":["import { OPEN_SECRETS_API_KEY } from '../apiKeys';\n\nconst getOpenSecretsRepId = async (repState, repName) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'getLegislators',\n        id: repState,\n        apikey: OPEN_SECRETS_API_KEY,\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        function cleanName(repName) {\n            const names = repName.split(' ');\n            if (names.length > 2) {\n              names.splice(1, 1);\n            }\n            return names.join(' ');\n          }\n\n        function getOpenSecretsRepIdFromName(stateRepList, repName) {\n            const cleanedName = cleanName(repName);\n            for (let rep of stateRepList) {\n                if (rep['@attributes'].firstlast === cleanedName) {\n                    return rep['@attributes'].cid\n                }\n            }\n            return null;\n        }\n\n        const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n\n        return {'repId': repId};\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {'repId': ''};;\n    }\n};\n\nconst getOpenSecretsCandidateContributions = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'candContrib',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('openSecretsContributions:', data)\n        const contribData = {\n            contributors: data.response.contributors.contributor,\n            cycle: data.response.contributors['@attributes'].cycle,\n            notice: data.response.contributors['@attributes'].notice,\n            origin: data.response.contributors['@attributes'].origin,\n        };\n\n        return contribData;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            contributors: [],\n            contributors: '',\n            contributors: '',\n            contributors: '',\n\n        };\n    }\n};\n\nconst getOpenSecretsCandidateSummary = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'candSummary',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('openSecretsSummary:', data)\n\n\n\n        function formatDollars(amount) {\n            return new Intl.NumberFormat('en-US', {\n                style: 'currency',\n                currency: 'USD',\n                minimumFractionDigits: 0,\n                minimumFractionDigits: 0,\n            }).format(amount);\n        }\n\n        const contribSummary = {\n            cashOnHand: formatDollars(data.response.summary['@attributes'].cash_on_hand),\n            cycle: data.response.summary['@attributes'].cycle, // This is not a dollar amount\n            debt: formatDollars(data.response.summary['@attributes'].debt),\n            lastUpdated: data.response.summary['@attributes'].last_updated, // This is a date\n            nextElection: data.response.summary['@attributes'].next_election, // This is a date or election cycle\n            origin: data.response.summary['@attributes'].origin, // This is likely a string\n            spent: formatDollars(data.response.summary['@attributes'].spent),\n            total: formatDollars(data.response.summary['@attributes'].total),\n        };\n\n        return contribSummary;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            cashOnHand: '',\n            cycle: '',\n            debt: '',\n            lastUpdated: '',\n            nextElection: '',\n            origin: '',\n            spent: '',\n            total: '',\n        };\n    }\n};\n\nconst getOpenSecretsCandidatePersonalFinances = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'memPFDprofile',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n        return data;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representativeContribInfo: '',\n        }\n    }\n}\n\nexport { getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances, getOpenSecretsCandidateSummary };\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,YAAY;AAEjD,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,KAAK;EAErD,MAAMC,MAAM,GAAG,iCAAiC;EAChD,MAAMC,MAAM,GAAG;IACXC,MAAM,EAAE,gBAAgB;IACxBC,EAAE,EAAEL,QAAQ;IACZM,MAAM,EAAER,oBAAoB;IAC5BS,MAAM,EAAE;EACZ,CAAC;EAED,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACN,MAAM,CAAC,CAACO,QAAQ,CAAC,CAAC;EAC1D,MAAMC,aAAa,GAAI,GAAET,MAAO,IAAGM,WAAY,EAAC;EAEhD,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAa,CAAC;IAC3C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;IAC7D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAElC,SAASC,SAASA,CAAClB,OAAO,EAAE;MACxB,MAAMmB,KAAK,GAAGnB,OAAO,CAACoB,KAAK,CAAC,GAAG,CAAC;MAChC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpBF,KAAK,CAACG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MACpB;MACA,OAAOH,KAAK,CAACI,IAAI,CAAC,GAAG,CAAC;IACxB;IAEF,SAASC,2BAA2BA,CAACC,YAAY,EAAEzB,OAAO,EAAE;MACxD,MAAM0B,WAAW,GAAGR,SAAS,CAAClB,OAAO,CAAC;MACtC,KAAK,IAAI2B,GAAG,IAAIF,YAAY,EAAE;QAC1B,IAAIE,GAAG,CAAC,aAAa,CAAC,CAACC,SAAS,KAAKF,WAAW,EAAE;UAC9C,OAAOC,GAAG,CAAC,aAAa,CAAC,CAACE,GAAG;QACjC;MACJ;MACA,OAAO,IAAI;IACf;IAEA,MAAMC,KAAK,GAAGN,2BAA2B,CAACR,IAAI,CAACL,QAAQ,CAACoB,UAAU,EAAE/B,OAAO,CAAC;IAE5E,OAAO;MAAC,OAAO,EAAE8B;IAAK,CAAC;EAE3B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MAAC,OAAO,EAAE;IAAE,CAAC;IAAC;EACzB;AACJ,CAAC;AAED,MAAME,oCAAoC,GAAG,MAAOC,UAAU,IAAK;EAE/D,MAAMlC,MAAM,GAAG,iCAAiC;EAChD,MAAMC,MAAM,GAAG;IACXC,MAAM,EAAE,aAAa;IACrBE,MAAM,EAAER,oBAAoB;IAC5BgC,GAAG,EAAEM,UAAU;IACfC,KAAK,EAAE,MAAM;IACb9B,MAAM,EAAE;EACZ,CAAC;EAED,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACN,MAAM,CAAC,CAACO,QAAQ,CAAC,CAAC;EAC1D,MAAMC,aAAa,GAAI,GAAET,MAAO,IAAGM,WAAY,EAAC;EAEhD,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAa,CAAC;IAC3C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;IAC7D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCgB,OAAO,CAACI,GAAG,CAAC,2BAA2B,EAAErB,IAAI,CAAC;IAC9C,MAAMsB,WAAW,GAAG;MAChBC,YAAY,EAAEvB,IAAI,CAACL,QAAQ,CAAC4B,YAAY,CAACC,WAAW;MACpDJ,KAAK,EAAEpB,IAAI,CAACL,QAAQ,CAAC4B,YAAY,CAAC,aAAa,CAAC,CAACH,KAAK;MACtDK,MAAM,EAAEzB,IAAI,CAACL,QAAQ,CAAC4B,YAAY,CAAC,aAAa,CAAC,CAACE,MAAM;MACxDC,MAAM,EAAE1B,IAAI,CAACL,QAAQ,CAAC4B,YAAY,CAAC,aAAa,CAAC,CAACG;IACtD,CAAC;IAED,OAAOJ,WAAW;EAEtB,CAAC,CAAC,OAAON,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACHO,YAAY,EAAE,EAAE;MAChBA,YAAY,EAAE,EAAE;MAChBA,YAAY,EAAE,EAAE;MAChBA,YAAY,EAAE;IAElB,CAAC;EACL;AACJ,CAAC;AAED,MAAMI,8BAA8B,GAAG,MAAOR,UAAU,IAAK;EAEzD,MAAMlC,MAAM,GAAG,iCAAiC;EAChD,MAAMC,MAAM,GAAG;IACXC,MAAM,EAAE,aAAa;IACrBE,MAAM,EAAER,oBAAoB;IAC5BgC,GAAG,EAAEM,UAAU;IACfC,KAAK,EAAE,MAAM;IACb9B,MAAM,EAAE;EACZ,CAAC;EAED,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACN,MAAM,CAAC,CAACO,QAAQ,CAAC,CAAC;EAC1D,MAAMC,aAAa,GAAI,GAAET,MAAO,IAAGM,WAAY,EAAC;EAEhD,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAa,CAAC;IAC3C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;IAC7D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCgB,OAAO,CAACI,GAAG,CAAC,qBAAqB,EAAErB,IAAI,CAAC;IAIxC,SAAS4B,aAAaA,CAACC,MAAM,EAAE;MAC3B,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QAClCC,KAAK,EAAE,UAAU;QACjBC,QAAQ,EAAE,KAAK;QACfC,qBAAqB,EAAE,CAAC;QACxBA,qBAAqB,EAAE;MAC3B,CAAC,CAAC,CAACC,MAAM,CAACN,MAAM,CAAC;IACrB;IAEA,MAAMO,cAAc,GAAG;MACnBC,UAAU,EAAET,aAAa,CAAC5B,IAAI,CAACL,QAAQ,CAAC2C,OAAO,CAAC,aAAa,CAAC,CAACC,YAAY,CAAC;MAC5EnB,KAAK,EAAEpB,IAAI,CAACL,QAAQ,CAAC2C,OAAO,CAAC,aAAa,CAAC,CAAClB,KAAK;MAAE;MACnDoB,IAAI,EAAEZ,aAAa,CAAC5B,IAAI,CAACL,QAAQ,CAAC2C,OAAO,CAAC,aAAa,CAAC,CAACE,IAAI,CAAC;MAC9DC,WAAW,EAAEzC,IAAI,CAACL,QAAQ,CAAC2C,OAAO,CAAC,aAAa,CAAC,CAACI,YAAY;MAAE;MAChEC,YAAY,EAAE3C,IAAI,CAACL,QAAQ,CAAC2C,OAAO,CAAC,aAAa,CAAC,CAACM,aAAa;MAAE;MAClElB,MAAM,EAAE1B,IAAI,CAACL,QAAQ,CAAC2C,OAAO,CAAC,aAAa,CAAC,CAACZ,MAAM;MAAE;MACrDmB,KAAK,EAAEjB,aAAa,CAAC5B,IAAI,CAACL,QAAQ,CAAC2C,OAAO,CAAC,aAAa,CAAC,CAACO,KAAK,CAAC;MAChEC,KAAK,EAAElB,aAAa,CAAC5B,IAAI,CAACL,QAAQ,CAAC2C,OAAO,CAAC,aAAa,CAAC,CAACQ,KAAK;IACnE,CAAC;IAED,OAAOV,cAAc;EAEzB,CAAC,CAAC,OAAOpB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACHqB,UAAU,EAAE,EAAE;MACdjB,KAAK,EAAE,EAAE;MACToB,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfE,YAAY,EAAE,EAAE;MAChBjB,MAAM,EAAE,EAAE;MACVmB,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACX,CAAC;EACL;AACJ,CAAC;AAED,MAAMC,uCAAuC,GAAG,MAAO5B,UAAU,IAAK;EAElE,MAAMlC,MAAM,GAAG,iCAAiC;EAChD,MAAMC,MAAM,GAAG;IACXC,MAAM,EAAE,eAAe;IACvBE,MAAM,EAAER,oBAAoB;IAC5BgC,GAAG,EAAEM,UAAU;IACfC,KAAK,EAAE,MAAM;IACb9B,MAAM,EAAE;EACZ,CAAC;EAED,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACN,MAAM,CAAC,CAACO,QAAQ,CAAC,CAAC;EAC1D,MAAMC,aAAa,GAAI,GAAET,MAAO,IAAGM,WAAY,EAAC;EAEhD,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAa,CAAC;IAC3C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;IAC7D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCgB,OAAO,CAACI,GAAG,CAACrB,IAAI,CAAC;IACjB,OAAOA,IAAI;EAEf,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACHgC,yBAAyB,EAAE;IAC/B,CAAC;EACL;AACJ,CAAC;AAED,SAASlE,mBAAmB,EAAEoC,oCAAoC,EAAE6B,uCAAuC,EAAEpB,8BAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}