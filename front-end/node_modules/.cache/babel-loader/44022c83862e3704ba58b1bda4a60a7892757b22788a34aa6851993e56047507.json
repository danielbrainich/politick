{"ast":null,"code":"const fetchOpenSecretsIds = async url => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`HTTP error. Status: ${response.status}`);\n  }\n  return response.json();\n};\nconst cleanRepName = repName => {\n  const names = repName.split(' ');\n  if (names.length > 2) {\n    names.splice(1, 1);\n  }\n  return names.join(' ');\n};\nconst getOpenSecretsRepId = async (repState, repName) => {\n  const apiUrl = `/api/open_secrets/ids/${repState}`;\n  try {\n    const data = await fetchOpenSecretsIds(apiUrl);\n    const cleanedName = cleanRepName(repName);\n    for (let rep of data.response.legislator) {\n      if (rep['@attributes'].firstlast === cleanedName) {\n        return {\n          'repId': rep['@attributes'].cid\n        };\n      }\n    }\n    return {\n      'repId': null\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      'repId': '',\n      'error': true,\n      'errorMessage': error.message\n    };\n  }\n};\nexport default getOpenSecretsRepId;\nconst getOpenSecretsCandidateContributions = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'candContrib',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('openSecretsContributions:', data);\n    const contribData = {\n      contributors: data.response.contributors.contributor,\n      cycle: data.response.contributors['@attributes'].cycle,\n      notice: data.response.contributors['@attributes'].notice,\n      origin: data.response.contributors['@attributes'].origin\n    };\n    return contribData;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      contributors: [],\n      cycle: '',\n      notice: '',\n      contributors: ''\n    };\n  }\n};\nconst getOpenSecretsCandidateSummary = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'candSummary',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('openSecretsSummary:', data);\n    function formatDollars(amount) {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }).format(amount);\n    }\n    const contribSummary = {\n      cashOnHand: formatDollars(data.response.summary['@attributes'].cash_on_hand),\n      cycle: data.response.summary['@attributes'].cycle,\n      // This is not a dollar amount\n      debt: formatDollars(data.response.summary['@attributes'].debt),\n      lastUpdated: data.response.summary['@attributes'].last_updated,\n      // This is a date\n      nextElection: data.response.summary['@attributes'].next_election,\n      // This is a date or election cycle\n      origin: data.response.summary['@attributes'].origin,\n      // This is likely a string\n      spent: formatDollars(data.response.summary['@attributes'].spent),\n      total: formatDollars(data.response.summary['@attributes'].total)\n    };\n    return contribSummary;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      cashOnHand: '',\n      cycle: '',\n      debt: '',\n      lastUpdated: '',\n      nextElection: '',\n      origin: '',\n      spent: '',\n      total: ''\n    };\n  }\n};\nconst getOpenSecretsCandidatePersonalFinances = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'memPFDprofile',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representativeContribInfo: ''\n    };\n  }\n};\nexport { getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances, getOpenSecretsCandidateSummary };","map":{"version":3,"names":["fetchOpenSecretsIds","url","response","fetch","ok","Error","status","json","cleanRepName","repName","names","split","length","splice","join","getOpenSecretsRepId","repState","apiUrl","data","cleanedName","rep","legislator","firstlast","cid","error","console","message","getOpenSecretsCandidateContributions","officialId","params","method","apikey","OPEN_SECRETS_API_KEY","cycle","output","queryString","URLSearchParams","toString","urlWithParams","log","contribData","contributors","contributor","notice","origin","getOpenSecretsCandidateSummary","formatDollars","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","contribSummary","cashOnHand","summary","cash_on_hand","debt","lastUpdated","last_updated","nextElection","next_election","spent","total","getOpenSecretsCandidatePersonalFinances","representativeContribInfo"],"sources":["/Users/dbrainy/dev/politick/front-end/src/api/openSecrets.js"],"sourcesContent":["const fetchOpenSecretsIds = async (url) => {\n    const response = await fetch(url);\n    if (!response.ok) {\n        throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    return response.json();\n};\n\nconst cleanRepName = (repName) => {\n    const names = repName.split(' ');\n    if (names.length > 2) {\n      names.splice(1, 1);\n    }\n    return names.join(' ');\n};\n\nconst getOpenSecretsRepId = async (repState, repName) => {\n    const apiUrl = `/api/open_secrets/ids/${repState}`;\n    try {\n        const data = await fetchOpenSecretsIds(apiUrl);\n        const cleanedName = cleanRepName(repName);\n        for (let rep of data.response.legislator) {\n            if (rep['@attributes'].firstlast === cleanedName) {\n                return { 'repId': rep['@attributes'].cid };\n            }\n        }\n        return { 'repId': null };\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return { 'repId': '', 'error': true, 'errorMessage': error.message };\n    }\n};\n\nexport default getOpenSecretsRepId;\nconst getOpenSecretsCandidateContributions = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'candContrib',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('openSecretsContributions:', data)\n        const contribData = {\n            contributors: data.response.contributors.contributor,\n            cycle: data.response.contributors['@attributes'].cycle,\n            notice: data.response.contributors['@attributes'].notice,\n            origin: data.response.contributors['@attributes'].origin,\n        };\n\n        return contribData;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            contributors: [],\n            cycle: '',\n            notice: '',\n            contributors: '',\n\n        };\n    }\n};\n\nconst getOpenSecretsCandidateSummary = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'candSummary',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('openSecretsSummary:', data)\n\n\n\n        function formatDollars(amount) {\n            return new Intl.NumberFormat('en-US', {\n                style: 'currency',\n                currency: 'USD',\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0,\n            }).format(amount);\n        }\n\n        const contribSummary = {\n            cashOnHand: formatDollars(data.response.summary['@attributes'].cash_on_hand),\n            cycle: data.response.summary['@attributes'].cycle, // This is not a dollar amount\n            debt: formatDollars(data.response.summary['@attributes'].debt),\n            lastUpdated: data.response.summary['@attributes'].last_updated, // This is a date\n            nextElection: data.response.summary['@attributes'].next_election, // This is a date or election cycle\n            origin: data.response.summary['@attributes'].origin, // This is likely a string\n            spent: formatDollars(data.response.summary['@attributes'].spent),\n            total: formatDollars(data.response.summary['@attributes'].total),\n        };\n\n        return contribSummary;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            cashOnHand: '',\n            cycle: '',\n            debt: '',\n            lastUpdated: '',\n            nextElection: '',\n            origin: '',\n            spent: '',\n            total: '',\n        };\n    }\n};\n\nconst getOpenSecretsCandidatePersonalFinances = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'memPFDprofile',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n        return data;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representativeContribInfo: '',\n        }\n    }\n}\n\nexport { getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances, getOpenSecretsCandidateSummary };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}