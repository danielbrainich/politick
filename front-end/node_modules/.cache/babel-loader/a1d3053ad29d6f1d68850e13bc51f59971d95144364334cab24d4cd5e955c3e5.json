{"ast":null,"code":"var _jsxFileName = \"/Users/dbrainy/dev/politick/src/GetReps.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport CIVIC_INFO_API_KEY from './apiKeys';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GetFederalReps() {\n  _s();\n  const [representative, setRepresentative] = useState([]);\n  const [senator1, setSenator1] = useState([]);\n  const [senator2, setSenator2] = useState([]);\n  const getData = async () => {\n    const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n    const params = {\n      address: '94501',\n      includeOffices: true,\n      levels: 'country',\n      roles: ['legislatorLowerBody', 'legislatorUpperBody'],\n      key: CIVIC_INFO_API_KEY\n    };\n    const urlWithParams = `${apiUrl}?address=${params.address}&includeOffices=${params.includeOffices}&levels=${params.levels}&roles=${params.roles[0]}&roles=${params.roles[1]}&key=${params.key}`;\n    try {\n      const response = await fetch(urlWithParams);\n      if (!response.ok) {\n        throw new Error(`HTTP error. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      const officials = data.officials;\n      const offices = data.offices;\n      function getRepresentativeIndex(offices) {\n        for (let office of offices) {\n          if (office.name === \"U.S. Representative\") {}\n        }\n      }\n      const indexSenator1 = none;\n      const indexSenator2 = none;\n      const indexRepresentative = none;\n      setRepresentative(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Hello World\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(GetFederalReps, \"tCd5dTBjJxAPwe5wWIDUDV8w72I=\");\n_c = GetFederalReps;\n;\nexport default GetFederalReps;\nvar _c;\n$RefreshReg$(_c, \"GetFederalReps\");","map":{"version":3,"names":["useEffect","useState","CIVIC_INFO_API_KEY","jsxDEV","_jsxDEV","GetFederalReps","_s","representative","setRepresentative","senator1","setSenator1","senator2","setSenator2","getData","apiUrl","params","address","includeOffices","levels","roles","key","urlWithParams","response","fetch","ok","Error","status","data","json","officials","offices","getRepresentativeIndex","office","name","indexSenator1","none","indexSenator2","indexRepresentative","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dbrainy/dev/politick/src/GetReps.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport CIVIC_INFO_API_KEY from './apiKeys';\n\nfunction GetFederalReps() {\n\n    const [representative, setRepresentative] = useState([]);\n    const [senator1, setSenator1] = useState([]);\n    const [senator2, setSenator2] = useState([]);\n\n    const getData = async () => {\n\n        const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n        const params = {\n            address: '94501',\n            includeOffices: true,\n            levels: 'country',\n            roles: ['legislatorLowerBody', 'legislatorUpperBody'],\n            key: CIVIC_INFO_API_KEY,\n        };\n\n        const urlWithParams = `${apiUrl}?address=${params.address}&includeOffices=${params.includeOffices}&levels=${params.levels}&roles=${params.roles[0]}&roles=${params.roles[1]}&key=${params.key}`;\n\n        try {\n            const response = await fetch(urlWithParams);\n            if (!response.ok) {\n                throw new Error(`HTTP error. Status: ${response.status}`);\n            }\n            const data = await response.json();\n\n            const officials = data.officials;\n            const offices = data.offices;\n\n            function getRepresentativeIndex(offices) {\n                \n                for (let office of offices) {\n                    if (office.name === \"U.S. Representative\") {\n\n                    }\n                }\n            }\n\n\n            const indexSenator1 = none;\n            const indexSenator2 = none;\n            const indexRepresentative = none;\n\n\n\n            setRepresentative(data);\n\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    };\n\n    useEffect(() => {\n        getData()\n    }, []);\n\n    return (\n        <p>Hello World</p>\n    );\n};\n\nexport default GetFederalReps;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,kBAAkB,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAEtB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMY,OAAO,GAAG,MAAAA,CAAA,KAAY;IAExB,MAAMC,MAAM,GAAG,yDAAyD;IACxE,MAAMC,MAAM,GAAG;MACXC,OAAO,EAAE,OAAO;MAChBC,cAAc,EAAE,IAAI;MACpBC,MAAM,EAAE,SAAS;MACjBC,KAAK,EAAE,CAAC,qBAAqB,EAAE,qBAAqB,CAAC;MACrDC,GAAG,EAAElB;IACT,CAAC;IAED,MAAMmB,aAAa,GAAI,GAAEP,MAAO,YAAWC,MAAM,CAACC,OAAQ,mBAAkBD,MAAM,CAACE,cAAe,WAAUF,MAAM,CAACG,MAAO,UAASH,MAAM,CAACI,KAAK,CAAC,CAAC,CAAE,UAASJ,MAAM,CAACI,KAAK,CAAC,CAAC,CAAE,QAAOJ,MAAM,CAACK,GAAI,EAAC;IAE/L,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAa,CAAC;MAC3C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC7D;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,MAAMC,SAAS,GAAGF,IAAI,CAACE,SAAS;MAChC,MAAMC,OAAO,GAAGH,IAAI,CAACG,OAAO;MAE5B,SAASC,sBAAsBA,CAACD,OAAO,EAAE;QAErC,KAAK,IAAIE,MAAM,IAAIF,OAAO,EAAE;UACxB,IAAIE,MAAM,CAACC,IAAI,KAAK,qBAAqB,EAAE,CAE3C;QACJ;MACJ;MAGA,MAAMC,aAAa,GAAGC,IAAI;MAC1B,MAAMC,aAAa,GAAGD,IAAI;MAC1B,MAAME,mBAAmB,GAAGF,IAAI;MAIhC3B,iBAAiB,CAACmB,IAAI,CAAC;IAG3B,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAEDtC,SAAS,CAAC,MAAM;IACZa,OAAO,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIT,OAAA;IAAAoC,QAAA,EAAG;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAE1B;AAACtC,EAAA,CA5DQD,cAAc;AAAAwC,EAAA,GAAdxC,cAAc;AA4DtB;AAED,eAAeA,cAAc;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}