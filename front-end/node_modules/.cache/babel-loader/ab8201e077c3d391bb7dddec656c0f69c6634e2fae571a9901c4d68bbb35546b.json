{"ast":null,"code":"import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY } from './apiKeys';\nimport statesData from './statesData';\nconst getCivicInfoRepByAddress = async zipCode => {\n  const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n  const params = {\n    address: zipCode,\n    includeOffices: true,\n    levels: 'country',\n    roles: 'legislatorLowerBody',\n    key: CIVIC_INFO_API_KEY\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    function extractCdNumber(inputString) {\n      const parts = inputString.split(\"cd:\");\n      return parts.length === 2 ? parseInt(parts[1], 10) : null;\n    }\n    const civicInfoRep = {\n      representative: {\n        name: data.officials[0].name,\n        party: data.officials[0].party,\n        urls: data.officials[0].urls,\n        channels: data.officials[0].channels\n      },\n      office: {\n        name: data.offices[0].name,\n        district: `${data.normalizedInput.state}-${extractCdNumber(data.offices[0].divisionId)}`\n      },\n      state: data.normalizedInput.state\n    };\n    console.log(data);\n    console.log(civicInfoRep);\n    return civicInfoRep;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representative: {},\n      state: ''\n    };\n  }\n};\nconst getOpenSecretsRepId = async (repState, repName) => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'getLegislators',\n    id: repState,\n    apikey: OPEN_SECRETS_API_KEY,\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    function cleanName(repName) {\n      const names = repName.split(' ');\n      if (names.length > 2) {\n        names.splice(1, 1);\n      }\n      return names.join(' ');\n    }\n    function getOpenSecretsRepIdFromName(stateRepList, repName) {\n      const cleanedName = cleanName(repName);\n      for (let rep of stateRepList) {\n        if (rep['@attributes'].firstlast === cleanedName) {\n          return rep['@attributes'].cid;\n        }\n      }\n      console.log(\"rep name no match:\", cleanedName);\n      return null;\n    }\n    const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n    console.log(\"repID:\", repId);\n    return repId;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representativeId: ''\n    };\n  }\n};\nconst getOpenSecretsCandidateContributions = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'candContrib',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representativeContribInfo: ''\n    };\n  }\n};\nconst getOpenSecretsCandidatePersonalFinances = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'memPFDprofile',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    // cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representativeContribInfo: ''\n    };\n  }\n};\nexport { getCivicInfoRepByAddress, getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances };","map":{"version":3,"names":["CIVIC_INFO_API_KEY","OPEN_SECRETS_API_KEY","statesData","getCivicInfoRepByAddress","zipCode","apiUrl","params","address","includeOffices","levels","roles","key","queryString","URLSearchParams","toString","urlWithParams","response","fetch","ok","Error","status","data","json","extractCdNumber","inputString","parts","split","length","parseInt","civicInfoRep","representative","name","officials","party","urls","channels","office","offices","district","normalizedInput","state","divisionId","console","log","error","getOpenSecretsRepId","repState","repName","method","id","apikey","output","cleanName","names","splice","join","getOpenSecretsRepIdFromName","stateRepList","cleanedName","rep","firstlast","cid","repId","legislator","representativeId","getOpenSecretsCandidateContributions","officialId","cycle","representativeContribInfo","getOpenSecretsCandidatePersonalFinances"],"sources":["/Users/dbrainy/dev/politick/src/api.js"],"sourcesContent":["import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY } from './apiKeys';\nimport statesData from './statesData';\n\nconst getCivicInfoRepByAddress = async (zipCode) => {\n\n    const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n    const params = {\n        address: zipCode,\n        includeOffices: true,\n        levels: 'country',\n        roles: 'legislatorLowerBody',\n        key: CIVIC_INFO_API_KEY,\n    };\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        function extractCdNumber(inputString) {\n            const parts = inputString.split(\"cd:\");\n            return parts.length === 2 ? parseInt(parts[1], 10) : null;\n        }\n\n        const civicInfoRep = {\n            representative: {\n                name: data.officials[0].name,\n                party: data.officials[0].party,\n                urls: data.officials[0].urls,\n                channels: data.officials[0].channels,\n            },\n            office: {\n                name: data.offices[0].name,\n                district: `${data.normalizedInput.state}-${extractCdNumber(data.offices[0].divisionId)}`,\n            },\n            state: data.normalizedInput.state,\n        };\n        console.log(data);\n        console.log(civicInfoRep);\n        return civicInfoRep;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representative: {},\n            state: '',\n        }\n    }\n};\n\nconst getOpenSecretsRepId = async (repState, repName) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'getLegislators',\n        id: repState,\n        apikey: OPEN_SECRETS_API_KEY,\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        function cleanName(repName) {\n            const names = repName.split(' ');\n            if (names.length > 2) {\n              names.splice(1, 1);\n            }\n            return names.join(' ');\n          }\n\n        function getOpenSecretsRepIdFromName(stateRepList, repName) {\n            const cleanedName = cleanName(repName);\n            for (let rep of stateRepList) {\n                if (rep['@attributes'].firstlast === cleanedName) {\n                    return rep['@attributes'].cid\n                }\n            }\n            console.log(\"rep name no match:\", cleanedName);\n            return null;\n        }\n        const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n        console.log(\"repID:\", repId);\n        return repId;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representativeId: '',\n        }\n    }\n};\n\nconst getOpenSecretsCandidateContributions = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'candContrib',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n        return data;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representativeContribInfo: '',\n        }\n    }\n}\n\nconst getOpenSecretsCandidatePersonalFinances = async (officialId) => {\n\n    const apiUrl = 'http://www.opensecrets.org/api/'\n    const params = {\n        method: 'memPFDprofile',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        // cycle: '2024',\n        output: 'json',\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n        return data;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representativeContribInfo: '',\n        }\n    }\n}\n\nexport { getCivicInfoRepByAddress, getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}