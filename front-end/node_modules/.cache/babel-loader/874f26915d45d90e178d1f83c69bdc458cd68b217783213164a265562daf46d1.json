{"ast":null,"code":"var _jsxFileName = \"/Users/dbrainy/dev/politick/src/GetRepByAddressForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { getCivicInfoOfficialsByAddress, getOpenSecretsCandidateIds, getOpenSecretCandidatesInfo } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GetRepByAddressForm() {\n  _s();\n  const [representative, setRepresentative] = useState({});\n  const [officialsIds, setOfficialsIds] = useState({});\n  const [formData, setFormData] = useState({\n    zipCode: ''\n  });\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const data = await getCivicInfoOfficialsByAddress(formData.zipCode);\n    setRepresentative(data.representative);\n    const ids = await getOpenSecretsCandidateIds(data.state, data.representative.name);\n    setOfficialsIds(ids);\n    console.log('Officials IDs:', officialsIds);\n\n    // Check if the properties are available before accessing nested properties\n    if (officialsIds.representative && officialsIds.representative.cid) {\n      const representativeContribData = await getOpenSecretCandidatesInfo(officialsIds.representative.cid);\n      console.log(representativeContribData);\n    }\n  };\n  const handleZipCodeChange = event => {\n    const value = event.target.value;\n    const inputName = event.target.name;\n    setFormData({\n      ...formData,\n      [inputName]: value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter your zip code:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleZipCodeChange,\n        required: true,\n        placeholder: \"Zip code\",\n        type: \"number\",\n        id: \"zipCode\",\n        name: \"zipCode\",\n        className: \"form-control\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Representative: \", representative.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(GetRepByAddressForm, \"wFWcZcKj03sbgeiP+vGwvEuJrLM=\");\n_c = GetRepByAddressForm;\n;\nexport default GetRepByAddressForm;\nvar _c;\n$RefreshReg$(_c, \"GetRepByAddressForm\");","map":{"version":3,"names":["useState","getCivicInfoOfficialsByAddress","getOpenSecretsCandidateIds","getOpenSecretCandidatesInfo","jsxDEV","_jsxDEV","Fragment","_Fragment","GetRepByAddressForm","_s","representative","setRepresentative","officialsIds","setOfficialsIds","formData","setFormData","zipCode","handleSubmit","event","preventDefault","data","ids","state","name","console","log","cid","representativeContribData","handleZipCodeChange","value","target","inputName","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","required","placeholder","type","id","className","_c","$RefreshReg$"],"sources":["/Users/dbrainy/dev/politick/src/GetRepByAddressForm.js"],"sourcesContent":["import { useState } from 'react';\nimport { getCivicInfoOfficialsByAddress, getOpenSecretsCandidateIds, getOpenSecretCandidatesInfo } from './api'\n\nfunction GetRepByAddressForm() {\n\n    const [representative, setRepresentative] = useState({});\n    const [officialsIds, setOfficialsIds] = useState({});\n    const [formData, setFormData] = useState({\n        zipCode: '',\n    });\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        const data = await getCivicInfoOfficialsByAddress(formData.zipCode);\n        setRepresentative(data.representative);\n\n        const ids = await getOpenSecretsCandidateIds(\n            data.state,\n            data.representative.name,\n        );\n        setOfficialsIds(ids);\n        console.log('Officials IDs:', officialsIds);\n\n    // Check if the properties are available before accessing nested properties\n    if (officialsIds.representative && officialsIds.representative.cid) {\n        const representativeContribData = await getOpenSecretCandidatesInfo(officialsIds.representative.cid);\n        console.log(representativeContribData);\n    }\n\n};\n\n    const handleZipCodeChange = (event) => {\n        const value = event.target.value;\n        const inputName = event.target.name;\n        setFormData({\n            ...formData,\n            [inputName]: value\n        });\n    }\n\n\n    return (\n        <>\n            <p>Enter your zip code:</p>\n            <form onSubmit={handleSubmit}>\n                <input onChange={handleZipCodeChange} required placeholder='Zip code' type='number' id='zipCode' name='zipCode' className='form-control' />\n                <button className=\"btn btn-primary\">Submit</button>\n            </form>\n            <ul>\n                <li>Representative: {representative.name}</li>\n            </ul>\n        </>\n    );\n};\n\nexport default GetRepByAddressForm;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,8BAA8B,EAAEC,0BAA0B,EAAEC,2BAA2B,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/G,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAE3B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC;IACrCgB,OAAO,EAAE;EACb,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;IAClCA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,MAAMC,IAAI,GAAG,MAAMnB,8BAA8B,CAACa,QAAQ,CAACE,OAAO,CAAC;IACnEL,iBAAiB,CAACS,IAAI,CAACV,cAAc,CAAC;IAEtC,MAAMW,GAAG,GAAG,MAAMnB,0BAA0B,CACxCkB,IAAI,CAACE,KAAK,EACVF,IAAI,CAACV,cAAc,CAACa,IACxB,CAAC;IACDV,eAAe,CAACQ,GAAG,CAAC;IACpBG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEb,YAAY,CAAC;;IAE/C;IACA,IAAIA,YAAY,CAACF,cAAc,IAAIE,YAAY,CAACF,cAAc,CAACgB,GAAG,EAAE;MAChE,MAAMC,yBAAyB,GAAG,MAAMxB,2BAA2B,CAACS,YAAY,CAACF,cAAc,CAACgB,GAAG,CAAC;MACpGF,OAAO,CAACC,GAAG,CAACE,yBAAyB,CAAC;IAC1C;EAEJ,CAAC;EAEG,MAAMC,mBAAmB,GAAIV,KAAK,IAAK;IACnC,MAAMW,KAAK,GAAGX,KAAK,CAACY,MAAM,CAACD,KAAK;IAChC,MAAME,SAAS,GAAGb,KAAK,CAACY,MAAM,CAACP,IAAI;IACnCR,WAAW,CAAC;MACR,GAAGD,QAAQ;MACX,CAACiB,SAAS,GAAGF;IACjB,CAAC,CAAC;EACN,CAAC;EAGD,oBACIxB,OAAA,CAAAE,SAAA;IAAAyB,QAAA,gBACI3B,OAAA;MAAA2B,QAAA,EAAG;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC3B/B,OAAA;MAAMgC,QAAQ,EAAEpB,YAAa;MAAAe,QAAA,gBACzB3B,OAAA;QAAOiC,QAAQ,EAAEV,mBAAoB;QAACW,QAAQ;QAACC,WAAW,EAAC,UAAU;QAACC,IAAI,EAAC,QAAQ;QAACC,EAAE,EAAC,SAAS;QAACnB,IAAI,EAAC,SAAS;QAACoB,SAAS,EAAC;MAAc;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3I/B,OAAA;QAAQsC,SAAS,EAAC,iBAAiB;QAAAX,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,eACP/B,OAAA;MAAA2B,QAAA,eACI3B,OAAA;QAAA2B,QAAA,GAAI,kBAAgB,EAACtB,cAAc,CAACa,IAAI;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAAA,eACP,CAAC;AAEX;AAAC3B,EAAA,CAnDQD,mBAAmB;AAAAoC,EAAA,GAAnBpC,mBAAmB;AAmD3B;AAED,eAAeA,mBAAmB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}