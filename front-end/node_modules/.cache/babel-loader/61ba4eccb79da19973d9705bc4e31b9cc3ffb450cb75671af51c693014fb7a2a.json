{"ast":null,"code":"import { CIVIC_INFO_API_KEY } from '../apiKeys';\nconst getCivicInfoRepByAddress = async zipCode => {\n  const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n  const params = {\n    address: zipCode,\n    includeOffices: true,\n    levels: 'country',\n    roles: 'legislatorLowerBody',\n    key: CIVIC_INFO_API_KEY\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('civic');\n    function extractDistrictNumber(inputString) {\n      const parts = inputString.split(\"cd:\");\n      return parts.length === 2 ? parseInt(parts[1], 10) : null;\n    }\n    const civicInfoRep = {\n      representative: {\n        name: data.officials[0].name,\n        party: data.officials[0].party,\n        urls: data.officials[0].urls,\n        channels: data.officials[0].channels\n      },\n      office: {\n        name: data.offices[0].name,\n        district: `${data.normalizedInput.state}-${extractDistrictNumber(data.offices[0].divisionId)}`\n      },\n      state: data.normalizedInput.state\n    };\n    return civicInfoRep;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representative: {},\n      office: {},\n      state: ''\n    };\n  }\n};\nexport default getCivicInfoRepByAddress;","map":{"version":3,"names":["CIVIC_INFO_API_KEY","getCivicInfoRepByAddress","zipCode","apiUrl","params","address","includeOffices","levels","roles","key","queryString","URLSearchParams","toString","urlWithParams","response","fetch","ok","Error","status","data","json","console","log","extractDistrictNumber","inputString","parts","split","length","parseInt","civicInfoRep","representative","name","officials","party","urls","channels","office","offices","district","normalizedInput","state","divisionId","error"],"sources":["/Users/dbrainy/dev/politick/src/api/civicInfoApi.js"],"sourcesContent":["import { CIVIC_INFO_API_KEY } from '../apiKeys';\n\nconst getCivicInfoRepByAddress = async (zipCode) => {\n\n    const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n    const params = {\n        address: zipCode,\n        includeOffices: true,\n        levels: 'country',\n        roles: 'legislatorLowerBody',\n        key: CIVIC_INFO_API_KEY,\n    };\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('civic')\n\n        function extractDistrictNumber(inputString) {\n            const parts = inputString.split(\"cd:\");\n            return parts.length === 2 ? parseInt(parts[1], 10) : null;\n        }\n\n        const civicInfoRep = {\n            representative: {\n                name: data.officials[0].name,\n                party: data.officials[0].party,\n                urls: data.officials[0].urls,\n                channels: data.officials[0].channels,\n            },\n            office: {\n                name: data.offices[0].name,\n                district: `${data.normalizedInput.state}-${extractDistrictNumber(data.offices[0].divisionId)}`,\n            },\n            state: data.normalizedInput.state,\n        };\n        return civicInfoRep;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representative: {},\n            office: {},\n            state: '',\n        }\n    }\n};\n\nexport default getCivicInfoRepByAddress;\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,YAAY;AAE/C,MAAMC,wBAAwB,GAAG,MAAOC,OAAO,IAAK;EAEhD,MAAMC,MAAM,GAAG,yDAAyD;EACxE,MAAMC,MAAM,GAAG;IACXC,OAAO,EAAEH,OAAO;IAChBI,cAAc,EAAE,IAAI;IACpBC,MAAM,EAAE,SAAS;IACjBC,KAAK,EAAE,qBAAqB;IAC5BC,GAAG,EAAET;EACT,CAAC;EAED,MAAMU,WAAW,GAAG,IAAIC,eAAe,CAACP,MAAM,CAAC,CAACQ,QAAQ,CAAC,CAAC;EAC1D,MAAMC,aAAa,GAAI,GAAEV,MAAO,IAAGO,WAAY,EAAC;EAEhD,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAa,CAAC;IAC3C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;IAC7D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IAEpB,SAASC,qBAAqBA,CAACC,WAAW,EAAE;MACxC,MAAMC,KAAK,GAAGD,WAAW,CAACE,KAAK,CAAC,KAAK,CAAC;MACtC,OAAOD,KAAK,CAACE,MAAM,KAAK,CAAC,GAAGC,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI;IAC7D;IAEA,MAAMI,YAAY,GAAG;MACjBC,cAAc,EAAE;QACZC,IAAI,EAAEZ,IAAI,CAACa,SAAS,CAAC,CAAC,CAAC,CAACD,IAAI;QAC5BE,KAAK,EAAEd,IAAI,CAACa,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK;QAC9BC,IAAI,EAAEf,IAAI,CAACa,SAAS,CAAC,CAAC,CAAC,CAACE,IAAI;QAC5BC,QAAQ,EAAEhB,IAAI,CAACa,SAAS,CAAC,CAAC,CAAC,CAACG;MAChC,CAAC;MACDC,MAAM,EAAE;QACJL,IAAI,EAAEZ,IAAI,CAACkB,OAAO,CAAC,CAAC,CAAC,CAACN,IAAI;QAC1BO,QAAQ,EAAG,GAAEnB,IAAI,CAACoB,eAAe,CAACC,KAAM,IAAGjB,qBAAqB,CAACJ,IAAI,CAACkB,OAAO,CAAC,CAAC,CAAC,CAACI,UAAU,CAAE;MACjG,CAAC;MACDD,KAAK,EAAErB,IAAI,CAACoB,eAAe,CAACC;IAChC,CAAC;IACD,OAAOX,YAAY;EAEvB,CAAC,CAAC,OAAOa,KAAK,EAAE;IACZrB,OAAO,CAACqB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACHZ,cAAc,EAAE,CAAC,CAAC;MAClBM,MAAM,EAAE,CAAC,CAAC;MACVI,KAAK,EAAE;IACX,CAAC;EACL;AACJ,CAAC;AAED,eAAevC,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}