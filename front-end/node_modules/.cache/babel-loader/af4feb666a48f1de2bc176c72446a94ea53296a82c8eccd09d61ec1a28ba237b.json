{"ast":null,"code":"// Import the API keys\nimport { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY, PRO_PUBLICA_API_KEY } from '../apiKeys';\n\n// Function to fetch representative data by address\nconst fetchCivicInfoRepByAddress = async zipCode => {\n  const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n  const params = {\n    address: zipCode,\n    includeOffices: true,\n    levels: 'country',\n    roles: 'legislatorLowerBody',\n    key: CIVIC_INFO_API_KEY\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  const response = await fetch(urlWithParams);\n  const data = await response.json();\n  return data;\n};\n\n// Function to transform civic info data\nconst transformCivicInfoData = data => {\n  function extractDistrictNumber(inputString) {\n    const parts = inputString.split(\"cd:\");\n    return parts.length === 2 ? parseInt(parts[1], 10) : null;\n  }\n  return {\n    representative: {\n      name: data.officials[0].name,\n      party: data.officials[0].party,\n      urls: data.officials[0].urls,\n      channels: data.officials[0].channels\n    },\n    office: {\n      name: data.offices[0].name,\n      district: `${data.normalizedInput.state}-${extractDistrictNumber(data.offices[0].divisionId)}`\n    },\n    state: data.normalizedInput.state\n  };\n};\n\n// Function to fetch OpenSecrets Representative ID\nconst fetchOpenSecretsRepId = async (repState, repName) => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'getLegislators',\n    id: repState,\n    apikey: OPEN_SECRETS_API_KEY,\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  const response = await fetch(urlWithParams);\n  const data = await response.json();\n  return data;\n};\n\n// Function to transform OpenSecrets ID data\nconst transformOpenSecretsIdData = (data, repName) => {\n  function cleanName(name) {\n    const names = name.split(' ');\n    if (names.length > 2) {\n      names.splice(1, 1);\n    }\n    return names.join(' ');\n  }\n  function getOpenSecretsRepIdFromName(stateRepList, name) {\n    const cleanedName = cleanName(name);\n    for (let rep of stateRepList) {\n      if (rep['@attributes'].firstlast === cleanedName) {\n        return rep['@attributes'].cid;\n      }\n    }\n    return null;\n  }\n  const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n  return {\n    'repId': repId\n  };\n};\n\n// Function to fetch OpenSecrets candidate contributions\nconst fetchOpenSecretsCandidateContributions = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'candContrib',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  const response = await fetch(urlWithParams);\n  const data = await response.json();\n  return data;\n};\n\n// Function to transform contributions data\nconst transformContributionsData = data => {\n  return {\n    contributors: data.response.contributors.contributor\n  };\n};\n\n// Function to fetch OpenSecrets candidate personal finances\nconst fetchOpenSecretsCandidatePersonalFinances = async officialId => {\n  const apiUrl = 'http://www.opensecrets.org/api/';\n  const params = {\n    method: 'memPFDprofile',\n    apikey: OPEN_SECRETS_API_KEY,\n    cid: officialId,\n    cycle: '2024',\n    output: 'json'\n  };\n  const queryString = new URLSearchParams(params).toString();\n  const urlWithParams = `${apiUrl}?${queryString}`;\n  const response = await fetch(urlWithParams);\n  const data = await response.json();\n  return data;\n};\n\n// Function to transform personal finance data\nconst transformPersonalFinancesData = data => {\n  return data; // Adjust this based on how you need to transform the data\n};\n\n// Function to fetch ProPublica representative information\nconst fetchProPublicaRepInfo = async repName => {\n  const params = {\n    congress: 118,\n    chamber: 'house'\n  };\n  const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`;\n  const headers = new Headers({\n    'X-API-Key': PRO_PUBLICA_API_KEY\n  });\n  const response = await fetch(apiUrl, {\n    headers: headers\n  });\n  const data = await response.json();\n  return data;\n};\n\n// Function to transform ProPublica data\nconst transformProPublicaData = (data, repName) => {\n  const [firstName, lastName] = repName.split(' ');\n  let matchingMember;\n  for (let member of data.results[0].members) {\n    if (member.first_name.toLowerCase() === firstName.toLowerCase() && member.last_name.toLowerCase() === lastName.toLowerCase()) {\n      matchingMember = member;\n      break;\n    }\n  }\n  if (matchingMember) {\n    return {\n      district: matchingMember.district,\n      geoid: matchingMember.geoid,\n      crp_id: matchingMember.crp_id\n    };\n  } else {\n    return null;\n  }\n};\n\n// Exporting all functions\nexport { fetchCivicInfoRepByAddress, transformCivicInfoData, fetchOpenSecretsRepId, transformOpenSecretsIdData, fetchOpenSecretsCandidateContributions, transformContributionsData, fetchOpenSecretsCandidatePersonalFinances, transformPersonalFinancesData, fetchProPublicaRepInfo, transformProPublicaData };","map":{"version":3,"names":["CIVIC_INFO_API_KEY","OPEN_SECRETS_API_KEY","PRO_PUBLICA_API_KEY","fetchCivicInfoRepByAddress","zipCode","apiUrl","params","address","includeOffices","levels","roles","key","queryString","URLSearchParams","toString","urlWithParams","response","fetch","data","json","transformCivicInfoData","extractDistrictNumber","inputString","parts","split","length","parseInt","representative","name","officials","party","urls","channels","office","offices","district","normalizedInput","state","divisionId","fetchOpenSecretsRepId","repState","repName","method","id","apikey","output","transformOpenSecretsIdData","cleanName","names","splice","join","getOpenSecretsRepIdFromName","stateRepList","cleanedName","rep","firstlast","cid","repId","legislator","fetchOpenSecretsCandidateContributions","officialId","cycle","transformContributionsData","contributors","contributor","fetchOpenSecretsCandidatePersonalFinances","transformPersonalFinancesData","fetchProPublicaRepInfo","congress","chamber","headers","Headers","transformProPublicaData","firstName","lastName","matchingMember","member","results","members","first_name","toLowerCase","last_name","geoid","crp_id"],"sources":["/Users/dbrainy/dev/politick/src/api/api.js"],"sourcesContent":["// Import the API keys\nimport { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY, PRO_PUBLICA_API_KEY } from '../apiKeys';\n\n// Function to fetch representative data by address\nconst fetchCivicInfoRepByAddress = async (zipCode) => {\n    const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n    const params = {\n        address: zipCode,\n        includeOffices: true,\n        levels: 'country',\n        roles: 'legislatorLowerBody',\n        key: CIVIC_INFO_API_KEY,\n    };\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    const response = await fetch(urlWithParams);\n    const data = await response.json();\n    return data;\n};\n\n// Function to transform civic info data\nconst transformCivicInfoData = (data) => {\n    function extractDistrictNumber(inputString) {\n        const parts = inputString.split(\"cd:\");\n        return parts.length === 2 ? parseInt(parts[1], 10) : null;\n    }\n\n    return {\n        representative: {\n            name: data.officials[0].name,\n            party: data.officials[0].party,\n            urls: data.officials[0].urls,\n            channels: data.officials[0].channels,\n        },\n        office: {\n            name: data.offices[0].name,\n            district: `${data.normalizedInput.state}-${extractDistrictNumber(data.offices[0].divisionId)}`,\n        },\n        state: data.normalizedInput.state,\n    };\n};\n\n// Function to fetch OpenSecrets Representative ID\nconst fetchOpenSecretsRepId = async (repState, repName) => {\n    const apiUrl = 'http://www.opensecrets.org/api/';\n    const params = {\n        method: 'getLegislators',\n        id: repState,\n        apikey: OPEN_SECRETS_API_KEY,\n        output: 'json',\n    };\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    const response = await fetch(urlWithParams);\n    const data = await response.json();\n    return data;\n};\n\n// Function to transform OpenSecrets ID data\nconst transformOpenSecretsIdData = (data, repName) => {\n    function cleanName(name) {\n        const names = name.split(' ');\n        if (names.length > 2) {\n            names.splice(1, 1);\n        }\n        return names.join(' ');\n    }\n\n    function getOpenSecretsRepIdFromName(stateRepList, name) {\n        const cleanedName = cleanName(name);\n        for (let rep of stateRepList) {\n            if (rep['@attributes'].firstlast === cleanedName) {\n                return rep['@attributes'].cid;\n            }\n        }\n        return null;\n    }\n\n    const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n    return {'repId': repId};\n};\n\n// Function to fetch OpenSecrets candidate contributions\nconst fetchOpenSecretsCandidateContributions = async (officialId) => {\n    const apiUrl = 'http://www.opensecrets.org/api/';\n    const params = {\n        method: 'candContrib',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    };\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    const response = await fetch(urlWithParams);\n    const data = await response.json();\n    return data;\n};\n\n// Function to transform contributions data\nconst transformContributionsData = (data) => {\n    return {\n        contributors: data.response.contributors.contributor\n    };\n};\n\n// Function to fetch OpenSecrets candidate personal finances\nconst fetchOpenSecretsCandidatePersonalFinances = async (officialId) => {\n    const apiUrl = 'http://www.opensecrets.org/api/';\n    const params = {\n        method: 'memPFDprofile',\n        apikey: OPEN_SECRETS_API_KEY,\n        cid: officialId,\n        cycle: '2024',\n        output: 'json',\n    };\n\n    const queryString = new URLSearchParams(params).toString();\n    const urlWithParams = `${apiUrl}?${queryString}`;\n\n    const response = await fetch(urlWithParams);\n    const data = await response.json();\n    return data;\n};\n\n// Function to transform personal finance data\nconst transformPersonalFinancesData = (data) => {\n    return data; // Adjust this based on how you need to transform the data\n};\n\n// Function to fetch ProPublica representative information\nconst fetchProPublicaRepInfo = async (repName) => {\n    const params = {\n        congress: 118,\n        chamber: 'house',\n    };\n    const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`;\n\n    const headers = new Headers({\n        'X-API-Key': PRO_PUBLICA_API_KEY,\n    });\n\n    const response = await fetch(apiUrl, { headers: headers });\n    const data = await response.json();\n    return data;\n};\n\n// Function to transform ProPublica data\nconst transformProPublicaData = (data, repName) => {\n    const [firstName, lastName] = repName.split(' ');\n\n    let matchingMember;\n    for (let member of data.results[0].members) {\n        if (\n            member.first_name.toLowerCase() === firstName.toLowerCase() &&\n            member.last_name.toLowerCase() === lastName.toLowerCase()\n        ) {\n            matchingMember = member;\n            break;\n        }\n    }\n\n    if (matchingMember) {\n        return {\n            district: matchingMember.district,\n            geoid: matchingMember.geoid,\n            crp_id: matchingMember.crp_id,\n        };\n    } else {\n        return null;\n    }\n};\n\n// Exporting all functions\nexport {\n    fetchCivicInfoRepByAddress,\n    transformCivicInfoData,\n    fetchOpenSecretsRepId,\n    transformOpenSecretsIdData,\n    fetchOpenSecretsCandidateContributions,\n    transformContributionsData,\n    fetchOpenSecretsCandidatePersonalFinances,\n    transformPersonalFinancesData,\n    fetchProPublicaRepInfo,\n    transformProPublicaData\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}