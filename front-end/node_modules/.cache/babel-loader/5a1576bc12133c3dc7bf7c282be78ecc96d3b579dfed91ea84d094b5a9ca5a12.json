{"ast":null,"code":"var _jsxFileName = \"/Users/dbrainy/dev/politick/src/GetReps.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport CIVIC_INFO_API_KEY from './apiKeys';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getOfficialsByAddress = async zipCode => {\n  const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n  const params = {\n    address: zipCode,\n    includeOffices: true,\n    levels: 'country',\n    roles: ['legislatorLowerBody', 'legislatorUpperBody'],\n    key: CIVIC_INFO_API_KEY\n  };\n  const urlWithParams = `${apiUrl}?address=${params.address}&includeOffices=${params.includeOffices}&levels=${params.levels}&roles=${params.roles[0]}&roles=${params.roles[1]}&key=${params.key}`;\n  try {\n    const response = await fetch(urlWithParams);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    function getOfficialIndicesByRole(offices, roleName) {\n      let OfficialIndices = null;\n      for (let office of offices) {\n        if (office.name === roleName) {\n          OfficialIndices = office.officialIndices;\n          break;\n        }\n      }\n      return OfficialIndices;\n    }\n    const indexSenator1 = getOfficialIndicesByRole(data.offices, 'U.S. Senator')[0];\n    const indexSenator2 = getOfficialIndicesByRole(data.offices, 'U.S. Senator')[1];\n    const indexRepresentative = getOfficialIndicesByRole(data.offices, 'U.S. Representative')[0];\n    return {\n      representative: data.officials[indexRepresentative],\n      senator1: data.officials[indexSenator1],\n      senator2: data.officials[indexSenator2]\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      representative: {},\n      senator1: {},\n      senator2: {}\n    };\n  }\n};\nfunction GetUserAddress() {\n  _s();\n  const [representative, setRepresentative] = useState({});\n  const [senator1, setSenator1] = useState({});\n  const [senator2, setSenator2] = useState({});\n  const [formData, setFormData] = useState({\n    zipCode: ''\n  });\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const data = await getOfficialsByAddress(formData.zipCode);\n    setRepresentative(data.representative);\n    setSenator1(data.senator1);\n    setSenator2(data.senator2);\n  };\n  const handleChangeInput = event => {\n    const value = event.target.value;\n    const inputName = event.target.name;\n    setFormData({\n      ...formData,\n      [inputName]: value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter your zip code:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChangeInput,\n        required: true,\n        placeholder: \"Zip code\",\n        type: \"number\",\n        id: \"zipCode\",\n        name: \"zipCode\",\n        className: \"form-control\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Representative: \", representative.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Senators: \", senator1.name, \" and \", senator2.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(GetUserAddress, \"Akhj3jU84cU/Y9YImjtxm/lVXuc=\");\n_c = GetUserAddress;\n;\nexport default GetUserAddress;\nvar _c;\n$RefreshReg$(_c, \"GetUserAddress\");","map":{"version":3,"names":["useState","CIVIC_INFO_API_KEY","jsxDEV","_jsxDEV","Fragment","_Fragment","getOfficialsByAddress","zipCode","apiUrl","params","address","includeOffices","levels","roles","key","urlWithParams","response","fetch","ok","Error","status","data","json","getOfficialIndicesByRole","offices","roleName","OfficialIndices","office","name","officialIndices","indexSenator1","indexSenator2","indexRepresentative","representative","officials","senator1","senator2","error","console","GetUserAddress","_s","setRepresentative","setSenator1","setSenator2","formData","setFormData","handleSubmit","event","preventDefault","handleChangeInput","value","target","inputName","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","required","placeholder","type","id","className","_c","$RefreshReg$"],"sources":["/Users/dbrainy/dev/politick/src/GetReps.js"],"sourcesContent":["import { useState } from \"react\";\nimport CIVIC_INFO_API_KEY from './apiKeys';\n\nconst getOfficialsByAddress = async (zipCode) => {\n\n    const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n    const params = {\n        address: zipCode,\n        includeOffices: true,\n        levels: 'country',\n        roles: ['legislatorLowerBody', 'legislatorUpperBody'],\n        key: CIVIC_INFO_API_KEY,\n    };\n\n    const urlWithParams = `${apiUrl}?address=${params.address}&includeOffices=${params.includeOffices}&levels=${params.levels}&roles=${params.roles[0]}&roles=${params.roles[1]}&key=${params.key}`;\n\n    try {\n        const response = await fetch(urlWithParams);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        function getOfficialIndicesByRole(offices, roleName) {\n            let OfficialIndices = null;\n            for (let office of offices) {\n                if (office.name === roleName) {\n                    OfficialIndices = office.officialIndices;\n                    break;\n                }\n            }\n            return OfficialIndices;\n        }\n\n\n        const indexSenator1 = getOfficialIndicesByRole(data.offices, 'U.S. Senator')[0];\n        const indexSenator2 = getOfficialIndicesByRole(data.offices, 'U.S. Senator')[1];\n        const indexRepresentative = getOfficialIndicesByRole(data.offices, 'U.S. Representative')[0];\n\n        return {\n            representative: data.officials[indexRepresentative],\n            senator1: data.officials[indexSenator1],\n            senator2: data.officials[indexSenator2],\n        };\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            representative: {},\n            senator1: {},\n            senator2: {},\n        }\n    }\n};\n\nfunction GetUserAddress() {\n\n    const [representative, setRepresentative] = useState({});\n    const [senator1, setSenator1] = useState({});\n    const [senator2, setSenator2] = useState({});\n    const [formData, setFormData] = useState({\n        zipCode: '',\n    });\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = await getOfficialsByAddress(formData.zipCode);\n        setRepresentative(data.representative);\n        setSenator1(data.senator1);\n        setSenator2(data.senator2);\n    };\n\n    const handleChangeInput = (event) => {\n        const value = event.target.value;\n        const inputName = event.target.name;\n        setFormData({\n            ...formData,\n            [inputName]: value\n        });\n    }\n\n    return (\n        <>\n            <p>Enter your zip code:</p>\n            <form onSubmit={handleSubmit}>\n                <input onChange={handleChangeInput} required placeholder='Zip code' type='number' id='zipCode' name='zipCode' className='form-control' />\n                <button className=\"btn btn-primary\">Submit</button>\n            </form>\n            <ul>\n                <li>Representative: {representative.name}</li>\n                <li>Senators: {senator1.name} and {senator2.name}</li>\n            </ul>\n        </>\n    );\n};\n\nexport default GetUserAddress;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}