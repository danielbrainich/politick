{"ast":null,"code":"// import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY, PRO_PUBLICA_API_KEY, CONGRESS_GOV_API_KEY } from '../apiKeys';\n\n// const getCivicInfoRepByAddress = async (zipCode) => {\n\n//     const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n//     const params = {\n//         address: zipCode,\n//         includeOffices: true,\n//         levels: 'country',\n//         roles: 'legislatorLowerBody',\n//         key: CIVIC_INFO_API_KEY,\n//     };\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n\n//         function extractDistrictNumber(inputString) {\n//             const parts = inputString.split(\"cd:\");\n//             return parts.length === 2 ? parseInt(parts[1], 10) : null;\n//         }\n\n//         const civicInfoRep = {\n//             representative: {\n//                 name: data.officials[0].name,\n//                 party: data.officials[0].party,\n//                 urls: data.officials[0].urls,\n//                 channels: data.officials[0].channels,\n//             },\n//             office: {\n//                 name: data.offices[0].name,\n//                 district: `${data.normalizedInput.state}-${extractDistrictNumber(data.offices[0].divisionId)}`,\n//             },\n//             state: data.normalizedInput.state,\n//         };\n//         return civicInfoRep;\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {\n//             representative: {},\n//             office: {},\n//             state: '',\n//         }\n//     }\n// };\n\n// const getOpenSecretsRepId = async (repState, repName) => {\n\n//     const apiUrl = 'http://www.opensecrets.org/api/'\n//     const params = {\n//         method: 'getLegislators',\n//         id: repState,\n//         apikey: OPEN_SECRETS_API_KEY,\n//         output: 'json',\n//     }\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n\n//         function cleanName(repName) {\n//             const names = repName.split(' ');\n//             if (names.length > 2) {\n//               names.splice(1, 1);\n//             }\n//             return names.join(' ');\n//           }\n\n//         function getOpenSecretsRepIdFromName(stateRepList, repName) {\n//             const cleanedName = cleanName(repName);\n//             for (let rep of stateRepList) {\n//                 if (rep['@attributes'].firstlast === cleanedName) {\n//                     return rep['@attributes'].cid\n//                 }\n//             }\n//             return null;\n//         }\n\n//         const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n\n//         return {'repId': repId};\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {'repId': ''};;\n//     }\n// };\n\n// const getOpenSecretsCandidateContributions = async (officialId) => {\n\n//     const apiUrl = 'http://www.opensecrets.org/api/'\n//     const params = {\n//         method: 'candContrib',\n//         apikey: OPEN_SECRETS_API_KEY,\n//         cid: officialId,\n//         cycle: '2024',\n//         output: 'json',\n//     }\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n\n//         const contribData = {\n//             contributors: data.response.contributors.contributor\n//         }\n//         console.log(contribData)\n//         return contribData;\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return { contributors: [] };\n//     }\n// };\n\n// const getOpenSecretsCandidatePersonalFinances = async (officialId) => {\n\n//     const apiUrl = 'http://www.opensecrets.org/api/'\n//     const params = {\n//         method: 'memPFDprofile',\n//         apikey: OPEN_SECRETS_API_KEY,\n//         cid: officialId,\n//         cycle: '2024',\n//         output: 'json',\n//     }\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n//         console.log(data);\n//         return data;\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {\n//             representativeContribInfo: '',\n//         }\n//     }\n// }\n\n// const getRepresentativeProPublicaInfo = async (repName) => {\n\n//     const params = {\n//         congress: 118,\n//         chamber: 'house',\n//     }\n//     const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`\n\n//     const headers = new Headers({\n//         'X-API-Key': PRO_PUBLICA_API_KEY,\n//     });\n\n//     try {\n//         const response = await fetch(apiUrl, { headers: headers });\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n//         console.log(data);\n\n//         const [firstName, lastName] = repName.split(' ');\n\n//         let matchingMember;\n\n//         for (let member of data.results[0].members) {\n//             if (\n//                 member.first_name.toLowerCase() === firstName.toLowerCase() &&\n//                 member.last_name.toLowerCase() === lastName.toLowerCase()\n//             ) {\n//                 matchingMember = member;\n//                 break;\n//             }\n//         }\n\n//         if (matchingMember) {\n//             const proPublicaRepInfo = {\n//                 district: matchingMember.district,\n//                 geoid: matchingMember.geoid,\n//                 crp_id: matchingMember.crp_id,\n//             }\n//             return proPublicaRepInfo;\n\n//         } else {\n//             console.log(`No match found for ${firstName} ${lastName}`);\n//             return null;\n//         }\n//     }\n\n//     catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {\n//             district: '',\n//             geoid: '',\n//             crp_id: '',\n//         }\n//     }\n// }\n\n// export { getCivicInfoRepByAddress, getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances, getRepresentativeProPublicaInfo};","map":{"version":3,"names":[],"sources":["/Users/dbrainy/dev/politick/src/api/api.js"],"sourcesContent":["// import { CIVIC_INFO_API_KEY, OPEN_SECRETS_API_KEY, PRO_PUBLICA_API_KEY, CONGRESS_GOV_API_KEY } from '../apiKeys';\n\n// const getCivicInfoRepByAddress = async (zipCode) => {\n\n//     const apiUrl = 'https://www.googleapis.com/civicinfo/v2/representatives';\n//     const params = {\n//         address: zipCode,\n//         includeOffices: true,\n//         levels: 'country',\n//         roles: 'legislatorLowerBody',\n//         key: CIVIC_INFO_API_KEY,\n//     };\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n\n//         function extractDistrictNumber(inputString) {\n//             const parts = inputString.split(\"cd:\");\n//             return parts.length === 2 ? parseInt(parts[1], 10) : null;\n//         }\n\n//         const civicInfoRep = {\n//             representative: {\n//                 name: data.officials[0].name,\n//                 party: data.officials[0].party,\n//                 urls: data.officials[0].urls,\n//                 channels: data.officials[0].channels,\n//             },\n//             office: {\n//                 name: data.offices[0].name,\n//                 district: `${data.normalizedInput.state}-${extractDistrictNumber(data.offices[0].divisionId)}`,\n//             },\n//             state: data.normalizedInput.state,\n//         };\n//         return civicInfoRep;\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {\n//             representative: {},\n//             office: {},\n//             state: '',\n//         }\n//     }\n// };\n\n// const getOpenSecretsRepId = async (repState, repName) => {\n\n//     const apiUrl = 'http://www.opensecrets.org/api/'\n//     const params = {\n//         method: 'getLegislators',\n//         id: repState,\n//         apikey: OPEN_SECRETS_API_KEY,\n//         output: 'json',\n//     }\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n\n//         function cleanName(repName) {\n//             const names = repName.split(' ');\n//             if (names.length > 2) {\n//               names.splice(1, 1);\n//             }\n//             return names.join(' ');\n//           }\n\n//         function getOpenSecretsRepIdFromName(stateRepList, repName) {\n//             const cleanedName = cleanName(repName);\n//             for (let rep of stateRepList) {\n//                 if (rep['@attributes'].firstlast === cleanedName) {\n//                     return rep['@attributes'].cid\n//                 }\n//             }\n//             return null;\n//         }\n\n//         const repId = getOpenSecretsRepIdFromName(data.response.legislator, repName);\n\n//         return {'repId': repId};\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {'repId': ''};;\n//     }\n// };\n\n// const getOpenSecretsCandidateContributions = async (officialId) => {\n\n//     const apiUrl = 'http://www.opensecrets.org/api/'\n//     const params = {\n//         method: 'candContrib',\n//         apikey: OPEN_SECRETS_API_KEY,\n//         cid: officialId,\n//         cycle: '2024',\n//         output: 'json',\n//     }\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n\n//         const contribData = {\n//             contributors: data.response.contributors.contributor\n//         }\n//         console.log(contribData)\n//         return contribData;\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return { contributors: [] };\n//     }\n// };\n\n\n// const getOpenSecretsCandidatePersonalFinances = async (officialId) => {\n\n//     const apiUrl = 'http://www.opensecrets.org/api/'\n//     const params = {\n//         method: 'memPFDprofile',\n//         apikey: OPEN_SECRETS_API_KEY,\n//         cid: officialId,\n//         cycle: '2024',\n//         output: 'json',\n//     }\n\n//     const queryString = new URLSearchParams(params).toString();\n//     const urlWithParams = `${apiUrl}?${queryString}`;\n\n//     try {\n//         const response = await fetch(urlWithParams);\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n//         console.log(data);\n//         return data;\n\n//     } catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {\n//             representativeContribInfo: '',\n//         }\n//     }\n// }\n\n// const getRepresentativeProPublicaInfo = async (repName) => {\n\n//     const params = {\n//         congress: 118,\n//         chamber: 'house',\n//     }\n//     const apiUrl = `https://api.propublica.org/congress/v1/${params.congress}/${params.chamber}/members.json`\n\n//     const headers = new Headers({\n//         'X-API-Key': PRO_PUBLICA_API_KEY,\n//     });\n\n//     try {\n//         const response = await fetch(apiUrl, { headers: headers });\n//         if (!response.ok) {\n//             throw new Error(`HTTP error. Status: ${response.status}`);\n//         }\n//         const data = await response.json();\n//         console.log(data);\n\n//         const [firstName, lastName] = repName.split(' ');\n\n//         let matchingMember;\n\n//         for (let member of data.results[0].members) {\n//             if (\n//                 member.first_name.toLowerCase() === firstName.toLowerCase() &&\n//                 member.last_name.toLowerCase() === lastName.toLowerCase()\n//             ) {\n//                 matchingMember = member;\n//                 break;\n//             }\n//         }\n\n//         if (matchingMember) {\n//             const proPublicaRepInfo = {\n//                 district: matchingMember.district,\n//                 geoid: matchingMember.geoid,\n//                 crp_id: matchingMember.crp_id,\n//             }\n//             return proPublicaRepInfo;\n\n//         } else {\n//             console.log(`No match found for ${firstName} ${lastName}`);\n//             return null;\n//         }\n//     }\n\n//     catch (error) {\n//         console.error('Error fetching data:', error);\n//         return {\n//             district: '',\n//             geoid: '',\n//             crp_id: '',\n//         }\n//     }\n// }\n\n\n\n\n\n\n\n\n// export { getCivicInfoRepByAddress, getOpenSecretsRepId, getOpenSecretsCandidateContributions, getOpenSecretsCandidatePersonalFinances, getRepresentativeProPublicaInfo};\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA"},"metadata":{},"sourceType":"module","externalDependencies":[]}